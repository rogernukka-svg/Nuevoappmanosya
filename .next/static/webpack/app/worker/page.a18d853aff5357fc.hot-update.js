"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/worker/page",{

/***/ "(app-pages-browser)/./lib/realtimeCore.js":
/*!*****************************!*\
  !*** ./lib/realtimeCore.js ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   startRealtimeCore: function() { return /* binding */ startRealtimeCore; },\n/* harmony export */   stopRealtimeCore: function() { return /* binding */ stopRealtimeCore; }\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(app-pages-browser)/./lib/supabase.js\");\n\nconst supabase = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.getSupabase)();\nlet channels = [];\nlet reconnectTimer = null;\nlet connectedCount = 0;\n/**\r\n * 🌐 Núcleo Realtime mejorado: detecta reconexiones automáticamente\r\n * Compatible con Supabase JS v2 (sin onOpen/onClose global)\r\n */ function startRealtimeCore(onUpdate) {\n    stopRealtimeCore(); // limpia todo antes\n    const config = {\n        config: {\n            broadcast: {\n                self: true\n            },\n            presence: {\n                key: Math.random().toString(36).substring(2, 8)\n            },\n            reconnect: true\n        }\n    };\n    // 🔌 Helper para crear canal y detectar reconexión/desconexión\n    const subscribeWithStatus = (name, options, handler)=>{\n        const ch = supabase.channel(name, config).on(\"postgres_changes\", options, (payload)=>{\n            handler(payload);\n        }).subscribe((status)=>{\n            console.log(\"⚡ Canal \".concat(name, \":\"), status);\n            if (status === \"SUBSCRIBED\") {\n                connectedCount++;\n                onUpdate(\"connected\", {\n                    channel: name,\n                    connectedCount\n                });\n            } else if (status === \"CLOSED\" || status === \"TIMED_OUT\" || status === \"CHANNEL_ERROR\") {\n                connectedCount = Math.max(0, connectedCount - 1);\n                onUpdate(\"disconnected\", {\n                    channel: name,\n                    connectedCount\n                });\n            }\n        });\n        return ch;\n    };\n    // 👷 Trabajadores (ubicación y estado)\n    const workers = subscribeWithStatus(\"core-workers\", {\n        event: \"*\",\n        schema: \"public\",\n        table: \"worker_profiles\"\n    }, (payload)=>payload.new && onUpdate(\"worker\", payload.new));\n    // 🧾 Pedidos\n    const jobs = subscribeWithStatus(\"core-jobs\", {\n        event: \"*\",\n        schema: \"public\",\n        table: \"jobs\"\n    }, (payload)=>payload.new && onUpdate(\"job\", payload.new));\n    // 💬 Mensajes\n    const messages = subscribeWithStatus(\"core-messages\", {\n        event: \"INSERT\",\n        schema: \"public\",\n        table: \"messages\"\n    }, (payload)=>payload.new && onUpdate(\"message\", payload.new));\n    // 👤 Perfiles\n    const profiles = subscribeWithStatus(\"core-profiles\", {\n        event: \"UPDATE\",\n        schema: \"public\",\n        table: \"profiles\"\n    }, (payload)=>payload.new && onUpdate(\"profile\", payload.new));\n    channels = [\n        workers,\n        jobs,\n        messages,\n        profiles\n    ];\n    console.log(\"✅ RealtimeCore iniciado y monitoreando canales activos\");\n    // 🔁 Reintento global en caso de que todos los canales caigan\n    clearInterval(reconnectTimer);\n    reconnectTimer = setInterval(async ()=>{\n        if (connectedCount === 0) {\n            console.warn(\"\\uD83D\\uDEA8 Todos los canales desconectados. Intentando reconectar...\");\n            stopRealtimeCore();\n            startRealtimeCore(onUpdate);\n        }\n    }, 5000);\n}\n/** 🔻 Limpieza global */ function stopRealtimeCore() {\n    channels.forEach((ch)=>supabase.removeChannel(ch));\n    channels = [];\n    connectedCount = 0;\n    if (reconnectTimer) {\n        clearInterval(reconnectTimer);\n        reconnectTimer = null;\n    }\n    console.log(\"\\uD83D\\uDED1 RealtimeCore detenido\");\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9yZWFsdGltZUNvcmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXlDO0FBQ3pDLE1BQU1DLFdBQVdELHNEQUFXQTtBQUU1QixJQUFJRSxXQUFXLEVBQUU7QUFDakIsSUFBSUMsaUJBQWlCO0FBQ3JCLElBQUlDLGlCQUFpQjtBQUVyQjs7O0NBR0MsR0FDTSxTQUFTQyxrQkFBa0JDLFFBQVE7SUFDeENDLG9CQUFvQixvQkFBb0I7SUFFeEMsTUFBTUMsU0FBUztRQUNiQSxRQUFRO1lBQ05DLFdBQVc7Z0JBQUVDLE1BQU07WUFBSztZQUN4QkMsVUFBVTtnQkFBRUMsS0FBS0MsS0FBS0MsTUFBTSxHQUFHQyxRQUFRLENBQUMsSUFBSUMsU0FBUyxDQUFDLEdBQUc7WUFBRztZQUM1REMsV0FBVztRQUNiO0lBQ0Y7SUFFQSwrREFBK0Q7SUFDL0QsTUFBTUMsc0JBQXNCLENBQUNDLE1BQU1DLFNBQVNDO1FBQzFDLE1BQU1DLEtBQUtyQixTQUNSc0IsT0FBTyxDQUFDSixNQUFNWCxRQUNkZ0IsRUFBRSxDQUFDLG9CQUFvQkosU0FBUyxDQUFDSztZQUNoQ0osUUFBUUk7UUFDVixHQUNDQyxTQUFTLENBQUMsQ0FBQ0M7WUFDVkMsUUFBUUMsR0FBRyxDQUFDLFdBQWdCLE9BQUxWLE1BQUssTUFBSVE7WUFFaEMsSUFBSUEsV0FBVyxjQUFjO2dCQUMzQnZCO2dCQUNBRSxTQUFTLGFBQWE7b0JBQUVpQixTQUFTSjtvQkFBTWY7Z0JBQWU7WUFDeEQsT0FBTyxJQUFJdUIsV0FBVyxZQUFZQSxXQUFXLGVBQWVBLFdBQVcsaUJBQWlCO2dCQUN0RnZCLGlCQUFpQlMsS0FBS2lCLEdBQUcsQ0FBQyxHQUFHMUIsaUJBQWlCO2dCQUM5Q0UsU0FBUyxnQkFBZ0I7b0JBQUVpQixTQUFTSjtvQkFBTWY7Z0JBQWU7WUFDM0Q7UUFDRjtRQUVGLE9BQU9rQjtJQUNUO0lBRUEsdUNBQXVDO0lBQ3ZDLE1BQU1TLFVBQVViLG9CQUNkLGdCQUNBO1FBQUVjLE9BQU87UUFBS0MsUUFBUTtRQUFVQyxPQUFPO0lBQWtCLEdBQ3pELENBQUNULFVBQVlBLFFBQVFVLEdBQUcsSUFBSTdCLFNBQVMsVUFBVW1CLFFBQVFVLEdBQUc7SUFHNUQsYUFBYTtJQUNiLE1BQU1DLE9BQU9sQixvQkFDWCxhQUNBO1FBQUVjLE9BQU87UUFBS0MsUUFBUTtRQUFVQyxPQUFPO0lBQU8sR0FDOUMsQ0FBQ1QsVUFBWUEsUUFBUVUsR0FBRyxJQUFJN0IsU0FBUyxPQUFPbUIsUUFBUVUsR0FBRztJQUd6RCxjQUFjO0lBQ2QsTUFBTUUsV0FBV25CLG9CQUNmLGlCQUNBO1FBQUVjLE9BQU87UUFBVUMsUUFBUTtRQUFVQyxPQUFPO0lBQVcsR0FDdkQsQ0FBQ1QsVUFBWUEsUUFBUVUsR0FBRyxJQUFJN0IsU0FBUyxXQUFXbUIsUUFBUVUsR0FBRztJQUc3RCxjQUFjO0lBQ2QsTUFBTUcsV0FBV3BCLG9CQUNmLGlCQUNBO1FBQUVjLE9BQU87UUFBVUMsUUFBUTtRQUFVQyxPQUFPO0lBQVcsR0FDdkQsQ0FBQ1QsVUFBWUEsUUFBUVUsR0FBRyxJQUFJN0IsU0FBUyxXQUFXbUIsUUFBUVUsR0FBRztJQUc3RGpDLFdBQVc7UUFBQzZCO1FBQVNLO1FBQU1DO1FBQVVDO0tBQVM7SUFFOUNWLFFBQVFDLEdBQUcsQ0FBQztJQUVaLDhEQUE4RDtJQUM5RFUsY0FBY3BDO0lBQ2RBLGlCQUFpQnFDLFlBQVk7UUFDM0IsSUFBSXBDLG1CQUFtQixHQUFHO1lBQ3hCd0IsUUFBUWEsSUFBSSxDQUFDO1lBQ2JsQztZQUNBRixrQkFBa0JDO1FBQ3BCO0lBQ0YsR0FBRztBQUNMO0FBRUEsdUJBQXVCLEdBQ2hCLFNBQVNDO0lBQ2RMLFNBQVN3QyxPQUFPLENBQUMsQ0FBQ3BCLEtBQU9yQixTQUFTMEMsYUFBYSxDQUFDckI7SUFDaERwQixXQUFXLEVBQUU7SUFDYkUsaUJBQWlCO0lBRWpCLElBQUlELGdCQUFnQjtRQUNsQm9DLGNBQWNwQztRQUNkQSxpQkFBaUI7SUFDbkI7SUFFQXlCLFFBQVFDLEdBQUcsQ0FBQztBQUNkIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2xpYi9yZWFsdGltZUNvcmUuanM/ZDFiZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRTdXBhYmFzZSB9IGZyb20gJy4vc3VwYWJhc2UnO1xyXG5jb25zdCBzdXBhYmFzZSA9IGdldFN1cGFiYXNlKCk7XHJcblxyXG5sZXQgY2hhbm5lbHMgPSBbXTtcclxubGV0IHJlY29ubmVjdFRpbWVyID0gbnVsbDtcclxubGV0IGNvbm5lY3RlZENvdW50ID0gMDtcclxuXHJcbi8qKlxyXG4gKiDwn4yQIE7DumNsZW8gUmVhbHRpbWUgbWVqb3JhZG86IGRldGVjdGEgcmVjb25leGlvbmVzIGF1dG9tw6F0aWNhbWVudGVcclxuICogQ29tcGF0aWJsZSBjb24gU3VwYWJhc2UgSlMgdjIgKHNpbiBvbk9wZW4vb25DbG9zZSBnbG9iYWwpXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRSZWFsdGltZUNvcmUob25VcGRhdGUpIHtcclxuICBzdG9wUmVhbHRpbWVDb3JlKCk7IC8vIGxpbXBpYSB0b2RvIGFudGVzXHJcblxyXG4gIGNvbnN0IGNvbmZpZyA9IHtcclxuICAgIGNvbmZpZzoge1xyXG4gICAgICBicm9hZGNhc3Q6IHsgc2VsZjogdHJ1ZSB9LFxyXG4gICAgICBwcmVzZW5jZTogeyBrZXk6IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyLCA4KSB9LFxyXG4gICAgICByZWNvbm5lY3Q6IHRydWUsXHJcbiAgICB9LFxyXG4gIH07XHJcblxyXG4gIC8vIPCflIwgSGVscGVyIHBhcmEgY3JlYXIgY2FuYWwgeSBkZXRlY3RhciByZWNvbmV4acOzbi9kZXNjb25leGnDs25cclxuICBjb25zdCBzdWJzY3JpYmVXaXRoU3RhdHVzID0gKG5hbWUsIG9wdGlvbnMsIGhhbmRsZXIpID0+IHtcclxuICAgIGNvbnN0IGNoID0gc3VwYWJhc2VcclxuICAgICAgLmNoYW5uZWwobmFtZSwgY29uZmlnKVxyXG4gICAgICAub24oJ3Bvc3RncmVzX2NoYW5nZXMnLCBvcHRpb25zLCAocGF5bG9hZCkgPT4ge1xyXG4gICAgICAgIGhhbmRsZXIocGF5bG9hZCk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5zdWJzY3JpYmUoKHN0YXR1cykgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGDimqEgQ2FuYWwgJHtuYW1lfTpgLCBzdGF0dXMpO1xyXG5cclxuICAgICAgICBpZiAoc3RhdHVzID09PSAnU1VCU0NSSUJFRCcpIHtcclxuICAgICAgICAgIGNvbm5lY3RlZENvdW50Kys7XHJcbiAgICAgICAgICBvblVwZGF0ZSgnY29ubmVjdGVkJywgeyBjaGFubmVsOiBuYW1lLCBjb25uZWN0ZWRDb3VudCB9KTtcclxuICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gJ0NMT1NFRCcgfHwgc3RhdHVzID09PSAnVElNRURfT1VUJyB8fCBzdGF0dXMgPT09ICdDSEFOTkVMX0VSUk9SJykge1xyXG4gICAgICAgICAgY29ubmVjdGVkQ291bnQgPSBNYXRoLm1heCgwLCBjb25uZWN0ZWRDb3VudCAtIDEpO1xyXG4gICAgICAgICAgb25VcGRhdGUoJ2Rpc2Nvbm5lY3RlZCcsIHsgY2hhbm5lbDogbmFtZSwgY29ubmVjdGVkQ291bnQgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gY2g7XHJcbiAgfTtcclxuXHJcbiAgLy8g8J+RtyBUcmFiYWphZG9yZXMgKHViaWNhY2nDs24geSBlc3RhZG8pXHJcbiAgY29uc3Qgd29ya2VycyA9IHN1YnNjcmliZVdpdGhTdGF0dXMoXHJcbiAgICAnY29yZS13b3JrZXJzJyxcclxuICAgIHsgZXZlbnQ6ICcqJywgc2NoZW1hOiAncHVibGljJywgdGFibGU6ICd3b3JrZXJfcHJvZmlsZXMnIH0sXHJcbiAgICAocGF5bG9hZCkgPT4gcGF5bG9hZC5uZXcgJiYgb25VcGRhdGUoJ3dvcmtlcicsIHBheWxvYWQubmV3KVxyXG4gICk7XHJcblxyXG4gIC8vIPCfp74gUGVkaWRvc1xyXG4gIGNvbnN0IGpvYnMgPSBzdWJzY3JpYmVXaXRoU3RhdHVzKFxyXG4gICAgJ2NvcmUtam9icycsXHJcbiAgICB7IGV2ZW50OiAnKicsIHNjaGVtYTogJ3B1YmxpYycsIHRhYmxlOiAnam9icycgfSxcclxuICAgIChwYXlsb2FkKSA9PiBwYXlsb2FkLm5ldyAmJiBvblVwZGF0ZSgnam9iJywgcGF5bG9hZC5uZXcpXHJcbiAgKTtcclxuXHJcbiAgLy8g8J+SrCBNZW5zYWplc1xyXG4gIGNvbnN0IG1lc3NhZ2VzID0gc3Vic2NyaWJlV2l0aFN0YXR1cyhcclxuICAgICdjb3JlLW1lc3NhZ2VzJyxcclxuICAgIHsgZXZlbnQ6ICdJTlNFUlQnLCBzY2hlbWE6ICdwdWJsaWMnLCB0YWJsZTogJ21lc3NhZ2VzJyB9LFxyXG4gICAgKHBheWxvYWQpID0+IHBheWxvYWQubmV3ICYmIG9uVXBkYXRlKCdtZXNzYWdlJywgcGF5bG9hZC5uZXcpXHJcbiAgKTtcclxuXHJcbiAgLy8g8J+RpCBQZXJmaWxlc1xyXG4gIGNvbnN0IHByb2ZpbGVzID0gc3Vic2NyaWJlV2l0aFN0YXR1cyhcclxuICAgICdjb3JlLXByb2ZpbGVzJyxcclxuICAgIHsgZXZlbnQ6ICdVUERBVEUnLCBzY2hlbWE6ICdwdWJsaWMnLCB0YWJsZTogJ3Byb2ZpbGVzJyB9LFxyXG4gICAgKHBheWxvYWQpID0+IHBheWxvYWQubmV3ICYmIG9uVXBkYXRlKCdwcm9maWxlJywgcGF5bG9hZC5uZXcpXHJcbiAgKTtcclxuXHJcbiAgY2hhbm5lbHMgPSBbd29ya2Vycywgam9icywgbWVzc2FnZXMsIHByb2ZpbGVzXTtcclxuXHJcbiAgY29uc29sZS5sb2coJ+KchSBSZWFsdGltZUNvcmUgaW5pY2lhZG8geSBtb25pdG9yZWFuZG8gY2FuYWxlcyBhY3Rpdm9zJyk7XHJcblxyXG4gIC8vIPCflIEgUmVpbnRlbnRvIGdsb2JhbCBlbiBjYXNvIGRlIHF1ZSB0b2RvcyBsb3MgY2FuYWxlcyBjYWlnYW5cclxuICBjbGVhckludGVydmFsKHJlY29ubmVjdFRpbWVyKTtcclxuICByZWNvbm5lY3RUaW1lciA9IHNldEludGVydmFsKGFzeW5jICgpID0+IHtcclxuICAgIGlmIChjb25uZWN0ZWRDb3VudCA9PT0gMCkge1xyXG4gICAgICBjb25zb2xlLndhcm4oJ/CfmqggVG9kb3MgbG9zIGNhbmFsZXMgZGVzY29uZWN0YWRvcy4gSW50ZW50YW5kbyByZWNvbmVjdGFyLi4uJyk7XHJcbiAgICAgIHN0b3BSZWFsdGltZUNvcmUoKTtcclxuICAgICAgc3RhcnRSZWFsdGltZUNvcmUob25VcGRhdGUpO1xyXG4gICAgfVxyXG4gIH0sIDUwMDApO1xyXG59XHJcblxyXG4vKiog8J+UuyBMaW1waWV6YSBnbG9iYWwgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHN0b3BSZWFsdGltZUNvcmUoKSB7XHJcbiAgY2hhbm5lbHMuZm9yRWFjaCgoY2gpID0+IHN1cGFiYXNlLnJlbW92ZUNoYW5uZWwoY2gpKTtcclxuICBjaGFubmVscyA9IFtdO1xyXG4gIGNvbm5lY3RlZENvdW50ID0gMDtcclxuXHJcbiAgaWYgKHJlY29ubmVjdFRpbWVyKSB7XHJcbiAgICBjbGVhckludGVydmFsKHJlY29ubmVjdFRpbWVyKTtcclxuICAgIHJlY29ubmVjdFRpbWVyID0gbnVsbDtcclxuICB9XHJcblxyXG4gIGNvbnNvbGUubG9nKCfwn5uRIFJlYWx0aW1lQ29yZSBkZXRlbmlkbycpO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJnZXRTdXBhYmFzZSIsInN1cGFiYXNlIiwiY2hhbm5lbHMiLCJyZWNvbm5lY3RUaW1lciIsImNvbm5lY3RlZENvdW50Iiwic3RhcnRSZWFsdGltZUNvcmUiLCJvblVwZGF0ZSIsInN0b3BSZWFsdGltZUNvcmUiLCJjb25maWciLCJicm9hZGNhc3QiLCJzZWxmIiwicHJlc2VuY2UiLCJrZXkiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHJpbmciLCJyZWNvbm5lY3QiLCJzdWJzY3JpYmVXaXRoU3RhdHVzIiwibmFtZSIsIm9wdGlvbnMiLCJoYW5kbGVyIiwiY2giLCJjaGFubmVsIiwib24iLCJwYXlsb2FkIiwic3Vic2NyaWJlIiwic3RhdHVzIiwiY29uc29sZSIsImxvZyIsIm1heCIsIndvcmtlcnMiLCJldmVudCIsInNjaGVtYSIsInRhYmxlIiwibmV3Iiwiam9icyIsIm1lc3NhZ2VzIiwicHJvZmlsZXMiLCJjbGVhckludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJ3YXJuIiwiZm9yRWFjaCIsInJlbW92ZUNoYW5uZWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/realtimeCore.js\n"));

/***/ })

});