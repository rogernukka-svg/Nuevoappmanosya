"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/worker/page",{

/***/ "(app-pages-browser)/./lib/realtimeCore.js":
/*!*****************************!*\
  !*** ./lib/realtimeCore.js ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   startRealtimeCore: function() { return /* binding */ startRealtimeCore; },\n/* harmony export */   stopRealtimeCore: function() { return /* binding */ stopRealtimeCore; }\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(app-pages-browser)/./lib/supabase.js\");\n\nconst supabase = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.getSupabase)();\n/** üîá Toggle r√°pido de logs (d√©jalo en false en prod) */ const DEBUG = false;\nconst log = function() {\n    for(var _len = arguments.length, a = new Array(_len), _key = 0; _key < _len; _key++){\n        a[_key] = arguments[_key];\n    }\n    if (DEBUG) console.log(...a);\n};\nconst warn = function() {\n    for(var _len = arguments.length, a = new Array(_len), _key = 0; _key < _len; _key++){\n        a[_key] = arguments[_key];\n    }\n    if (DEBUG) console.warn(...a);\n};\nlet channels = [];\nlet socket = null;\nlet pingTimer = null;\nlet watchdogTimer = null;\nlet lastHeartbeatAt = 0;\nlet lastStatus = \"unknown\"; // 'connected' | 'disconnected' | 'unknown'\nconst subscribed = new Set();\n/**\r\n * üåê RealtimeCore (silencioso y estable)\r\n * - Conexi√≥n directa al socket\r\n * - Keep-alive por heartbeat\r\n * - Reconstrucci√≥n prudente si todos los canales caen o no hay heartbeat\r\n * - Sin toasts; logs s√≥lo si DEBUG=true\r\n *\r\n * @param {(type: 'connected'|'disconnected'|'worker'|'job'|'message'|'profile', data?: any) => void} onUpdate\r\n * @returns {() => void} cleanup (opcional)\r\n */ function startRealtimeCore(onUpdate) {\n    stopRealtimeCore(); // limpieza previa segura\n    log(\"‚öôÔ∏è RealtimeCore ‚Üí conectando socket...\");\n    socket = supabase.realtime.connect();\n    // Verificaci√≥n adicional para evitar errores si el objeto cambia\n    if (!socket || typeof socket.push !== \"function\") {\n        console.error(\"‚ùå Error: socket no inicializado correctamente.\");\n        return;\n    }\n    const channelConfig = {\n        config: {\n            broadcast: {\n                self: true\n            },\n            presence: {\n                key: \"manosya-core\"\n            },\n            reconnect: true\n        }\n    };\n    /** Suscriptor con manejo de estado global */ const subscribeWithStatus = (name, pgOptions, handler)=>{\n        const ch = supabase.channel(name, channelConfig).on(\"postgres_changes\", pgOptions, (payload)=>{\n            var _payload_new, _ref;\n            // üîç Emitimos s√≥lo cuando hay datos v√°lidos\n            const data = (_ref = (_payload_new = payload === null || payload === void 0 ? void 0 : payload.new) !== null && _payload_new !== void 0 ? _payload_new : payload === null || payload === void 0 ? void 0 : payload.record) !== null && _ref !== void 0 ? _ref : null;\n            if (data != null) handler(data);\n        }).subscribe((status)=>{\n            log(\"canal \".concat(name, \":\"), status);\n            if (status === \"SUBSCRIBED\") {\n                subscribed.add(name);\n                // Primer canal conectado ‚Üí estado global online\n                if (lastStatus !== \"connected\") {\n                    lastStatus = \"connected\";\n                    lastHeartbeatAt = Date.now();\n                    onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(\"connected\", {\n                        channel: name\n                    });\n                    log(\"‚úÖ realtime conectado\");\n                }\n            } else if ([\n                \"CLOSED\",\n                \"TIMED_OUT\",\n                \"CHANNEL_ERROR\"\n            ].includes(status)) {\n                subscribed.delete(name);\n                // Si todos caen ‚Üí marcamos desconexi√≥n global\n                if (subscribed.size === 0 && lastStatus !== \"disconnected\") {\n                    lastStatus = \"disconnected\";\n                    onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(\"disconnected\", {\n                        channel: name\n                    });\n                    warn(\"‚ö†Ô∏è realtime desconectado (no hay canales activos)\");\n                }\n            }\n        });\n        return ch;\n    };\n    // === Canales principales ===\n    const workers = subscribeWithStatus(\"core-workers\", {\n        event: \"*\",\n        schema: \"public\",\n        table: \"worker_profiles\"\n    }, (row)=>onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(\"worker\", row));\n    const jobs = subscribeWithStatus(\"core-jobs\", {\n        event: \"*\",\n        schema: \"public\",\n        table: \"jobs\"\n    }, (row)=>onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(\"job\", row));\n    const messages = subscribeWithStatus(\"core-messages\", {\n        event: \"INSERT\",\n        schema: \"public\",\n        table: \"messages\"\n    }, (row)=>onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(\"message\", row));\n    const profiles = subscribeWithStatus(\"core-profiles\", {\n        event: \"UPDATE\",\n        schema: \"public\",\n        table: \"profiles\"\n    }, (row)=>onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(\"profile\", row));\n    channels = [\n        workers,\n        jobs,\n        messages,\n        profiles\n    ];\n    // üíì Heartbeat silencioso cada 10s\n    clearInterval(pingTimer);\n    pingTimer = setInterval(()=>{\n        try {\n            var _socket_isConnected;\n            if (socket === null || socket === void 0 ? void 0 : (_socket_isConnected = socket.isConnected) === null || _socket_isConnected === void 0 ? void 0 : _socket_isConnected.call(socket)) {\n                socket.push({\n                    topic: \"phoenix\",\n                    event: \"heartbeat\",\n                    payload: {},\n                    ref: socket.makeRef()\n                });\n                lastHeartbeatAt = Date.now();\n                log(\"\\uD83D\\uDC93 heartbeat\");\n            } else {\n                warn(\"\\uD83E\\uDDF5 socket no conectado ‚Üí reconnect()\");\n                socket = supabase.realtime.connect();\n            }\n        } catch (err) {\n            console.error(\"‚ö†Ô∏è Error en heartbeat:\", err.message);\n        }\n    }, 10000);\n    // üõ°Ô∏è Watchdog prudente (cada 20s)\n    clearInterval(watchdogTimer);\n    watchdogTimer = setInterval(()=>{\n        const noHeartbeatFor = Date.now() - lastHeartbeatAt;\n        // Reconstruir s√≥lo si:\n        // 1Ô∏è‚É£ No hay canales activos (desconexi√≥n real)\n        // 2Ô∏è‚É£ Pasaron >30s sin heartbeat (pesta√±a dormida/red lenta)\n        if (subscribed.size === 0 || noHeartbeatFor > 30000) {\n            warn(\"\\uD83E\\uDDEF watchdog ‚Üí reconstruyendo RealtimeCore‚Ä¶\");\n            const cb = onUpdate;\n            stopRealtimeCore();\n            startRealtimeCore(cb);\n        }\n    }, 20000);\n    // Retorna funci√≥n de limpieza segura\n    return ()=>stopRealtimeCore();\n}\n/** üßπ Limpieza total y segura */ function stopRealtimeCore() {\n    try {\n        channels.forEach((ch)=>supabase.removeChannel(ch));\n        channels = [];\n        subscribed.clear();\n        if (pingTimer) clearInterval(pingTimer);\n        if (watchdogTimer) clearInterval(watchdogTimer);\n        if (socket) {\n            try {\n                socket.disconnect();\n            } catch (e) {\n            /* noop */ }\n            socket = null;\n        }\n        lastStatus = \"unknown\";\n        log(\"\\uD83D\\uDED1 RealtimeCore detenido\");\n    } catch (err) {\n        console.error(\"‚ùå Error al detener RealtimeCore:\", err);\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9yZWFsdGltZUNvcmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXlDO0FBRXpDLE1BQU1DLFdBQVdELHNEQUFXQTtBQUU1Qix1REFBdUQsR0FDdkQsTUFBTUUsUUFBUTtBQUNkLE1BQU1DLE1BQU87cUNBQUlDO1FBQUFBOztJQUFRLElBQUlGLE9BQU9HLFFBQVFGLEdBQUcsSUFBSUM7QUFBSTtBQUN2RCxNQUFNRSxPQUFPO3FDQUFJRjtRQUFBQTs7SUFBUSxJQUFJRixPQUFPRyxRQUFRQyxJQUFJLElBQUlGO0FBQUk7QUFFeEQsSUFBSUcsV0FBVyxFQUFFO0FBQ2pCLElBQUlDLFNBQVM7QUFDYixJQUFJQyxZQUFZO0FBQ2hCLElBQUlDLGdCQUFnQjtBQUVwQixJQUFJQyxrQkFBa0I7QUFDdEIsSUFBSUMsYUFBYSxXQUFvQiwyQ0FBMkM7QUFDaEYsTUFBTUMsYUFBYSxJQUFJQztBQUV2Qjs7Ozs7Ozs7O0NBU0MsR0FDTSxTQUFTQyxrQkFBa0JDLFFBQVE7SUFDeENDLG9CQUFvQix5QkFBeUI7SUFFN0NkLElBQUk7SUFDSkssU0FBU1AsU0FBU2lCLFFBQVEsQ0FBQ0MsT0FBTztJQUVsQyxpRUFBaUU7SUFDakUsSUFBSSxDQUFDWCxVQUFVLE9BQU9BLE9BQU9ZLElBQUksS0FBSyxZQUFZO1FBQ2hEZixRQUFRZ0IsS0FBSyxDQUFDO1FBQ2Q7SUFDRjtJQUVBLE1BQU1DLGdCQUFnQjtRQUNwQkMsUUFBUTtZQUNOQyxXQUFXO2dCQUFFQyxNQUFNO1lBQUs7WUFDeEJDLFVBQVU7Z0JBQUVDLEtBQUs7WUFBZTtZQUNoQ0MsV0FBVztRQUNiO0lBQ0Y7SUFFQSwyQ0FBMkMsR0FDM0MsTUFBTUMsc0JBQXNCLENBQUNDLE1BQU1DLFdBQVdDO1FBQzVDLE1BQU1DLEtBQUtoQyxTQUNSaUMsT0FBTyxDQUFDSixNQUFNUixlQUNkYSxFQUFFLENBQUMsb0JBQW9CSixXQUFXLENBQUNLO2dCQUVyQkEsY0FBQUE7WUFEYiw0Q0FBNEM7WUFD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Q25EMUQsS0FBSztZQUNMLE1BQU0yRCxLQUFLakQ7WUFDWEM7WUFDQUYsa0JBQWtCa0Q7UUFDcEI7SUFDRixHQUFHO0lBRUgscUNBQXFDO0lBQ3JDLE9BQU8sSUFBTWhEO0FBQ2Y7QUFFQSwrQkFBK0IsR0FDeEIsU0FBU0E7SUFDZCxJQUFJO1FBQ0ZWLFNBQVMyRCxPQUFPLENBQUMsQ0FBQ2pDLEtBQU9oQyxTQUFTa0UsYUFBYSxDQUFDbEM7UUFDaEQxQixXQUFXLEVBQUU7UUFDYk0sV0FBV3VELEtBQUs7UUFFaEIsSUFBSTNELFdBQVcrQyxjQUFjL0M7UUFDN0IsSUFBSUMsZUFBZThDLGNBQWM5QztRQUVqQyxJQUFJRixRQUFRO1lBQ1YsSUFBSTtnQkFDRkEsT0FBTzZELFVBQVU7WUFDbkIsRUFBRSxVQUFNO1lBQ04sUUFBUSxHQUNWO1lBQ0E3RCxTQUFTO1FBQ1g7UUFFQUksYUFBYTtRQUNiVCxJQUFJO0lBQ04sRUFBRSxPQUFPMkQsS0FBSztRQUNaekQsUUFBUWdCLEtBQUssQ0FBQyxvQ0FBb0N5QztJQUNwRDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2xpYi9yZWFsdGltZUNvcmUuanM/ZDFiZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRTdXBhYmFzZSB9IGZyb20gJy4vc3VwYWJhc2UnO1xyXG5cclxuY29uc3Qgc3VwYWJhc2UgPSBnZXRTdXBhYmFzZSgpO1xyXG5cclxuLyoqIPCflIcgVG9nZ2xlIHLDoXBpZG8gZGUgbG9ncyAoZMOpamFsbyBlbiBmYWxzZSBlbiBwcm9kKSAqL1xyXG5jb25zdCBERUJVRyA9IGZhbHNlO1xyXG5jb25zdCBsb2cgID0gKC4uLmEpID0+IHsgaWYgKERFQlVHKSBjb25zb2xlLmxvZyguLi5hKTsgfTtcclxuY29uc3Qgd2FybiA9ICguLi5hKSA9PiB7IGlmIChERUJVRykgY29uc29sZS53YXJuKC4uLmEpOyB9O1xyXG5cclxubGV0IGNoYW5uZWxzID0gW107XHJcbmxldCBzb2NrZXQgPSBudWxsO1xyXG5sZXQgcGluZ1RpbWVyID0gbnVsbDtcclxubGV0IHdhdGNoZG9nVGltZXIgPSBudWxsO1xyXG5cclxubGV0IGxhc3RIZWFydGJlYXRBdCA9IDA7XHJcbmxldCBsYXN0U3RhdHVzID0gJ3Vua25vd24nOyAgICAgICAgICAvLyAnY29ubmVjdGVkJyB8ICdkaXNjb25uZWN0ZWQnIHwgJ3Vua25vd24nXHJcbmNvbnN0IHN1YnNjcmliZWQgPSBuZXcgU2V0KCk7XHJcblxyXG4vKipcclxuICog8J+MkCBSZWFsdGltZUNvcmUgKHNpbGVuY2lvc28geSBlc3RhYmxlKVxyXG4gKiAtIENvbmV4acOzbiBkaXJlY3RhIGFsIHNvY2tldFxyXG4gKiAtIEtlZXAtYWxpdmUgcG9yIGhlYXJ0YmVhdFxyXG4gKiAtIFJlY29uc3RydWNjacOzbiBwcnVkZW50ZSBzaSB0b2RvcyBsb3MgY2FuYWxlcyBjYWVuIG8gbm8gaGF5IGhlYXJ0YmVhdFxyXG4gKiAtIFNpbiB0b2FzdHM7IGxvZ3Mgc8OzbG8gc2kgREVCVUc9dHJ1ZVxyXG4gKlxyXG4gKiBAcGFyYW0geyh0eXBlOiAnY29ubmVjdGVkJ3wnZGlzY29ubmVjdGVkJ3wnd29ya2VyJ3wnam9iJ3wnbWVzc2FnZSd8J3Byb2ZpbGUnLCBkYXRhPzogYW55KSA9PiB2b2lkfSBvblVwZGF0ZVxyXG4gKiBAcmV0dXJucyB7KCkgPT4gdm9pZH0gY2xlYW51cCAob3BjaW9uYWwpXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRSZWFsdGltZUNvcmUob25VcGRhdGUpIHtcclxuICBzdG9wUmVhbHRpbWVDb3JlKCk7IC8vIGxpbXBpZXphIHByZXZpYSBzZWd1cmFcclxuXHJcbiAgbG9nKCfimpnvuI8gUmVhbHRpbWVDb3JlIOKGkiBjb25lY3RhbmRvIHNvY2tldC4uLicpO1xyXG4gIHNvY2tldCA9IHN1cGFiYXNlLnJlYWx0aW1lLmNvbm5lY3QoKTtcclxuXHJcbiAgLy8gVmVyaWZpY2FjacOzbiBhZGljaW9uYWwgcGFyYSBldml0YXIgZXJyb3JlcyBzaSBlbCBvYmpldG8gY2FtYmlhXHJcbiAgaWYgKCFzb2NrZXQgfHwgdHlwZW9mIHNvY2tldC5wdXNoICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3I6IHNvY2tldCBubyBpbmljaWFsaXphZG8gY29ycmVjdGFtZW50ZS4nKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGNvbnN0IGNoYW5uZWxDb25maWcgPSB7XHJcbiAgICBjb25maWc6IHtcclxuICAgICAgYnJvYWRjYXN0OiB7IHNlbGY6IHRydWUgfSxcclxuICAgICAgcHJlc2VuY2U6IHsga2V5OiAnbWFub3N5YS1jb3JlJyB9LCAvLyDwn5SSIENsYXZlIGZpamEgcGFyYSBldml0YXIgcmVnZW5lcmFjaW9uZXNcclxuICAgICAgcmVjb25uZWN0OiB0cnVlLFxyXG4gICAgfSxcclxuICB9O1xyXG5cclxuICAvKiogU3VzY3JpcHRvciBjb24gbWFuZWpvIGRlIGVzdGFkbyBnbG9iYWwgKi9cclxuICBjb25zdCBzdWJzY3JpYmVXaXRoU3RhdHVzID0gKG5hbWUsIHBnT3B0aW9ucywgaGFuZGxlcikgPT4ge1xyXG4gICAgY29uc3QgY2ggPSBzdXBhYmFzZVxyXG4gICAgICAuY2hhbm5lbChuYW1lLCBjaGFubmVsQ29uZmlnKVxyXG4gICAgICAub24oJ3Bvc3RncmVzX2NoYW5nZXMnLCBwZ09wdGlvbnMsIChwYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgLy8g8J+UjSBFbWl0aW1vcyBzw7NsbyBjdWFuZG8gaGF5IGRhdG9zIHbDoWxpZG9zXHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHBheWxvYWQ/Lm5ldyA/PyBwYXlsb2FkPy5yZWNvcmQgPz8gbnVsbDtcclxuICAgICAgICBpZiAoZGF0YSAhPSBudWxsKSBoYW5kbGVyKGRhdGEpO1xyXG4gICAgICB9KVxyXG4gICAgICAuc3Vic2NyaWJlKChzdGF0dXMpID0+IHtcclxuICAgICAgICBsb2coYGNhbmFsICR7bmFtZX06YCwgc3RhdHVzKTtcclxuXHJcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ1NVQlNDUklCRUQnKSB7XHJcbiAgICAgICAgICBzdWJzY3JpYmVkLmFkZChuYW1lKTtcclxuICAgICAgICAgIC8vIFByaW1lciBjYW5hbCBjb25lY3RhZG8g4oaSIGVzdGFkbyBnbG9iYWwgb25saW5lXHJcbiAgICAgICAgICBpZiAobGFzdFN0YXR1cyAhPT0gJ2Nvbm5lY3RlZCcpIHtcclxuICAgICAgICAgICAgbGFzdFN0YXR1cyA9ICdjb25uZWN0ZWQnO1xyXG4gICAgICAgICAgICBsYXN0SGVhcnRiZWF0QXQgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICBvblVwZGF0ZT8uKCdjb25uZWN0ZWQnLCB7IGNoYW5uZWw6IG5hbWUgfSk7XHJcbiAgICAgICAgICAgIGxvZygn4pyFIHJlYWx0aW1lIGNvbmVjdGFkbycpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoWydDTE9TRUQnLCAnVElNRURfT1VUJywgJ0NIQU5ORUxfRVJST1InXS5pbmNsdWRlcyhzdGF0dXMpKSB7XHJcbiAgICAgICAgICBzdWJzY3JpYmVkLmRlbGV0ZShuYW1lKTtcclxuICAgICAgICAgIC8vIFNpIHRvZG9zIGNhZW4g4oaSIG1hcmNhbW9zIGRlc2NvbmV4acOzbiBnbG9iYWxcclxuICAgICAgICAgIGlmIChzdWJzY3JpYmVkLnNpemUgPT09IDAgJiYgbGFzdFN0YXR1cyAhPT0gJ2Rpc2Nvbm5lY3RlZCcpIHtcclxuICAgICAgICAgICAgbGFzdFN0YXR1cyA9ICdkaXNjb25uZWN0ZWQnO1xyXG4gICAgICAgICAgICBvblVwZGF0ZT8uKCdkaXNjb25uZWN0ZWQnLCB7IGNoYW5uZWw6IG5hbWUgfSk7XHJcbiAgICAgICAgICAgIHdhcm4oJ+KaoO+4jyByZWFsdGltZSBkZXNjb25lY3RhZG8gKG5vIGhheSBjYW5hbGVzIGFjdGl2b3MpJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gY2g7XHJcbiAgfTtcclxuXHJcbiAgLy8gPT09IENhbmFsZXMgcHJpbmNpcGFsZXMgPT09XHJcbiAgY29uc3Qgd29ya2VycyA9IHN1YnNjcmliZVdpdGhTdGF0dXMoXHJcbiAgICAnY29yZS13b3JrZXJzJyxcclxuICAgIHsgZXZlbnQ6ICcqJywgc2NoZW1hOiAncHVibGljJywgdGFibGU6ICd3b3JrZXJfcHJvZmlsZXMnIH0sXHJcbiAgICAocm93KSA9PiBvblVwZGF0ZT8uKCd3b3JrZXInLCByb3cpXHJcbiAgKTtcclxuXHJcbiAgY29uc3Qgam9icyA9IHN1YnNjcmliZVdpdGhTdGF0dXMoXHJcbiAgICAnY29yZS1qb2JzJyxcclxuICAgIHsgZXZlbnQ6ICcqJywgc2NoZW1hOiAncHVibGljJywgdGFibGU6ICdqb2JzJyB9LFxyXG4gICAgKHJvdykgPT4gb25VcGRhdGU/Lignam9iJywgcm93KVxyXG4gICk7XHJcblxyXG4gIGNvbnN0IG1lc3NhZ2VzID0gc3Vic2NyaWJlV2l0aFN0YXR1cyhcclxuICAgICdjb3JlLW1lc3NhZ2VzJyxcclxuICAgIHsgZXZlbnQ6ICdJTlNFUlQnLCBzY2hlbWE6ICdwdWJsaWMnLCB0YWJsZTogJ21lc3NhZ2VzJyB9LFxyXG4gICAgKHJvdykgPT4gb25VcGRhdGU/LignbWVzc2FnZScsIHJvdylcclxuICApO1xyXG5cclxuICBjb25zdCBwcm9maWxlcyA9IHN1YnNjcmliZVdpdGhTdGF0dXMoXHJcbiAgICAnY29yZS1wcm9maWxlcycsXHJcbiAgICB7IGV2ZW50OiAnVVBEQVRFJywgc2NoZW1hOiAncHVibGljJywgdGFibGU6ICdwcm9maWxlcycgfSxcclxuICAgIChyb3cpID0+IG9uVXBkYXRlPy4oJ3Byb2ZpbGUnLCByb3cpXHJcbiAgKTtcclxuXHJcbiAgY2hhbm5lbHMgPSBbd29ya2Vycywgam9icywgbWVzc2FnZXMsIHByb2ZpbGVzXTtcclxuXHJcbiAgLy8g8J+SkyBIZWFydGJlYXQgc2lsZW5jaW9zbyBjYWRhIDEwc1xyXG4gIGNsZWFySW50ZXJ2YWwocGluZ1RpbWVyKTtcclxuICBwaW5nVGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBpZiAoc29ja2V0Py5pc0Nvbm5lY3RlZD8uKCkpIHtcclxuICAgICAgICBzb2NrZXQucHVzaCh7XHJcbiAgICAgICAgICB0b3BpYzogJ3Bob2VuaXgnLFxyXG4gICAgICAgICAgZXZlbnQ6ICdoZWFydGJlYXQnLFxyXG4gICAgICAgICAgcGF5bG9hZDoge30sXHJcbiAgICAgICAgICByZWY6IHNvY2tldC5tYWtlUmVmKCksXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbGFzdEhlYXJ0YmVhdEF0ID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBsb2coJ/CfkpMgaGVhcnRiZWF0Jyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgd2Fybign8J+ntSBzb2NrZXQgbm8gY29uZWN0YWRvIOKGkiByZWNvbm5lY3QoKScpO1xyXG4gICAgICAgIHNvY2tldCA9IHN1cGFiYXNlLnJlYWx0aW1lLmNvbm5lY3QoKTtcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KaoO+4jyBFcnJvciBlbiBoZWFydGJlYXQ6JywgZXJyLm1lc3NhZ2UpO1xyXG4gICAgfVxyXG4gIH0sIDEwMDAwKTtcclxuXHJcbiAgLy8g8J+boe+4jyBXYXRjaGRvZyBwcnVkZW50ZSAoY2FkYSAyMHMpXHJcbiAgY2xlYXJJbnRlcnZhbCh3YXRjaGRvZ1RpbWVyKTtcclxuICB3YXRjaGRvZ1RpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgY29uc3Qgbm9IZWFydGJlYXRGb3IgPSBEYXRlLm5vdygpIC0gbGFzdEhlYXJ0YmVhdEF0O1xyXG5cclxuICAgIC8vIFJlY29uc3RydWlyIHPDs2xvIHNpOlxyXG4gICAgLy8gMe+4j+KDoyBObyBoYXkgY2FuYWxlcyBhY3Rpdm9zIChkZXNjb25leGnDs24gcmVhbClcclxuICAgIC8vIDLvuI/ig6MgUGFzYXJvbiA+MzBzIHNpbiBoZWFydGJlYXQgKHBlc3Rhw7FhIGRvcm1pZGEvcmVkIGxlbnRhKVxyXG4gICAgaWYgKHN1YnNjcmliZWQuc2l6ZSA9PT0gMCB8fCBub0hlYXJ0YmVhdEZvciA+IDMwMDAwKSB7XHJcbiAgICAgIHdhcm4oJ/Cfp68gd2F0Y2hkb2cg4oaSIHJlY29uc3RydXllbmRvIFJlYWx0aW1lQ29yZeKApicpO1xyXG4gICAgICBjb25zdCBjYiA9IG9uVXBkYXRlO1xyXG4gICAgICBzdG9wUmVhbHRpbWVDb3JlKCk7XHJcbiAgICAgIHN0YXJ0UmVhbHRpbWVDb3JlKGNiKTtcclxuICAgIH1cclxuICB9LCAyMDAwMCk7XHJcblxyXG4gIC8vIFJldG9ybmEgZnVuY2nDs24gZGUgbGltcGllemEgc2VndXJhXHJcbiAgcmV0dXJuICgpID0+IHN0b3BSZWFsdGltZUNvcmUoKTtcclxufVxyXG5cclxuLyoqIPCfp7kgTGltcGllemEgdG90YWwgeSBzZWd1cmEgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHN0b3BSZWFsdGltZUNvcmUoKSB7XHJcbiAgdHJ5IHtcclxuICAgIGNoYW5uZWxzLmZvckVhY2goKGNoKSA9PiBzdXBhYmFzZS5yZW1vdmVDaGFubmVsKGNoKSk7XHJcbiAgICBjaGFubmVscyA9IFtdO1xyXG4gICAgc3Vic2NyaWJlZC5jbGVhcigpO1xyXG5cclxuICAgIGlmIChwaW5nVGltZXIpIGNsZWFySW50ZXJ2YWwocGluZ1RpbWVyKTtcclxuICAgIGlmICh3YXRjaGRvZ1RpbWVyKSBjbGVhckludGVydmFsKHdhdGNoZG9nVGltZXIpO1xyXG5cclxuICAgIGlmIChzb2NrZXQpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBzb2NrZXQuZGlzY29ubmVjdCgpO1xyXG4gICAgICB9IGNhdGNoIHtcclxuICAgICAgICAvKiBub29wICovXHJcbiAgICAgIH1cclxuICAgICAgc29ja2V0ID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBsYXN0U3RhdHVzID0gJ3Vua25vd24nO1xyXG4gICAgbG9nKCfwn5uRIFJlYWx0aW1lQ29yZSBkZXRlbmlkbycpO1xyXG4gIH0gY2F0Y2ggKGVycikge1xyXG4gICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGFsIGRldGVuZXIgUmVhbHRpbWVDb3JlOicsIGVycik7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJnZXRTdXBhYmFzZSIsInN1cGFiYXNlIiwiREVCVUciLCJsb2ciLCJhIiwiY29uc29sZSIsIndhcm4iLCJjaGFubmVscyIsInNvY2tldCIsInBpbmdUaW1lciIsIndhdGNoZG9nVGltZXIiLCJsYXN0SGVhcnRiZWF0QXQiLCJsYXN0U3RhdHVzIiwic3Vic2NyaWJlZCIsIlNldCIsInN0YXJ0UmVhbHRpbWVDb3JlIiwib25VcGRhdGUiLCJzdG9wUmVhbHRpbWVDb3JlIiwicmVhbHRpbWUiLCJjb25uZWN0IiwicHVzaCIsImVycm9yIiwiY2hhbm5lbENvbmZpZyIsImNvbmZpZyIsImJyb2FkY2FzdCIsInNlbGYiLCJwcmVzZW5jZSIsImtleSIsInJlY29ubmVjdCIsInN1YnNjcmliZVdpdGhTdGF0dXMiLCJuYW1lIiwicGdPcHRpb25zIiwiaGFuZGxlciIsImNoIiwiY2hhbm5lbCIsIm9uIiwicGF5bG9hZCIsImRhdGEiLCJuZXciLCJyZWNvcmQiLCJzdWJzY3JpYmUiLCJzdGF0dXMiLCJhZGQiLCJEYXRlIiwibm93IiwiaW5jbHVkZXMiLCJkZWxldGUiLCJzaXplIiwid29ya2VycyIsImV2ZW50Iiwic2NoZW1hIiwidGFibGUiLCJyb3ciLCJqb2JzIiwibWVzc2FnZXMiLCJwcm9maWxlcyIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImlzQ29ubmVjdGVkIiwidG9waWMiLCJyZWYiLCJtYWtlUmVmIiwiZXJyIiwibWVzc2FnZSIsIm5vSGVhcnRiZWF0Rm9yIiwiY2IiLCJmb3JFYWNoIiwicmVtb3ZlQ2hhbm5lbCIsImNsZWFyIiwiZGlzY29ubmVjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/realtimeCore.js\n"));

/***/ })

});