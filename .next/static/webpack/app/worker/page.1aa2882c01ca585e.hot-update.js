"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/worker/page",{

/***/ "(app-pages-browser)/./lib/realtimeCore.js":
/*!*****************************!*\
  !*** ./lib/realtimeCore.js ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   startRealtimeCore: function() { return /* binding */ startRealtimeCore; },\n/* harmony export */   stopRealtimeCore: function() { return /* binding */ stopRealtimeCore; }\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(app-pages-browser)/./lib/supabase.js\");\n// /lib/realtimeCore.js\n\nlet channels = [];\nlet reconnectTimer = null;\nlet pingTimer = null;\nlet lastPing = Date.now();\nlet connected = false;\n/**\r\n * 🌐 RealtimeCore robusto con autoreconexión y logs\r\n */ function startRealtimeCore(onUpdate) {\n    const supabase = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.getSupabase)();\n    console.log(\"⚙️ Iniciando RealtimeCore...\");\n    stopRealtimeCore();\n    const subscribeChannel = (name, config, handler)=>{\n        const ch = supabase.channel(name).on(\"postgres_changes\", config, handler);\n        ch.subscribe((status)=>{\n            console.log(\"\\uD83D\\uDCE1 Canal \".concat(name, \":\"), status);\n            if (status === \"SUBSCRIBED\") {\n                connected = true;\n                onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(\"connected\", {\n                    channel: name\n                });\n            } else if (status === \"CLOSED\" || status === \"CHANNEL_ERROR\" || status === \"TIMED_OUT\") {\n                connected = false;\n                onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(\"disconnected\", {\n                    channel: name\n                });\n            }\n        });\n        channels.push(ch);\n    };\n    // === Jobs ===\n    subscribeChannel(\"core-jobs\", {\n        event: \"*\",\n        schema: \"public\",\n        table: \"jobs\"\n    }, (payload)=>onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(\"job\", payload.new || payload.old));\n    // === Messages ===\n    subscribeChannel(\"core-messages\", {\n        event: \"INSERT\",\n        schema: \"public\",\n        table: \"messages\"\n    }, (payload)=>onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(\"message\", payload.new));\n    // === Worker profiles ===\n    subscribeChannel(\"core-profiles\", {\n        event: \"*\",\n        schema: \"public\",\n        table: \"worker_profiles\"\n    }, (payload)=>onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(\"profile\", payload.new));\n    // ❤️ Ping cada 15s\n    clearInterval(pingTimer);\n    pingTimer = setInterval(()=>{\n        const diff = Date.now() - lastPing;\n        if (diff > 30000) {\n            console.warn(\"⚠️ Inactividad detectada, reconstruyendo RealtimeCore...\");\n            restartRealtimeCore(onUpdate);\n            return;\n        }\n        console.log(\"\\uD83D\\uDD04 Ping Realtime OK\");\n        lastPing = Date.now();\n    }, 15000);\n}\n/**\r\n * 🔁 Reinicia todo el sistema realtime\r\n */ function restartRealtimeCore(onUpdate) {\n    stopRealtimeCore();\n    clearTimeout(reconnectTimer);\n    reconnectTimer = setTimeout(()=>startRealtimeCore(onUpdate), 2000);\n}\n/**\r\n * 🛑 Limpieza total\r\n */ function stopRealtimeCore() {\n    const supabase = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.getSupabase)();\n    channels.forEach((ch)=>{\n        try {\n            supabase.removeChannel(ch);\n        } catch (err) {\n            console.warn(\"Error cerrando canal:\", err.message);\n        }\n    });\n    channels = [];\n    clearInterval(pingTimer);\n    clearTimeout(reconnectTimer);\n    console.log(\"\\uD83D\\uDED1 RealtimeCore detenido\");\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9yZWFsdGltZUNvcmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsdUJBQXVCO0FBQ2tCO0FBRXpDLElBQUlDLFdBQVcsRUFBRTtBQUNqQixJQUFJQyxpQkFBaUI7QUFDckIsSUFBSUMsWUFBWTtBQUNoQixJQUFJQyxXQUFXQyxLQUFLQyxHQUFHO0FBQ3ZCLElBQUlDLFlBQVk7QUFFaEI7O0NBRUMsR0FDTSxTQUFTQyxrQkFBa0JDLFFBQVE7SUFDeEMsTUFBTUMsV0FBV1Ysc0RBQVdBO0lBQzVCVyxRQUFRQyxHQUFHLENBQUM7SUFFWkM7SUFFQSxNQUFNQyxtQkFBbUIsQ0FBQ0MsTUFBTUMsUUFBUUM7UUFDdEMsTUFBTUMsS0FBS1IsU0FBU1MsT0FBTyxDQUFDSixNQUFNSyxFQUFFLENBQUMsb0JBQW9CSixRQUFRQztRQUVqRUMsR0FBR0csU0FBUyxDQUFDLENBQUNDO1lBQ1pYLFFBQVFDLEdBQUcsQ0FBQyxzQkFBaUIsT0FBTEcsTUFBSyxNQUFJTztZQUNqQyxJQUFJQSxXQUFXLGNBQWM7Z0JBQzNCZixZQUFZO2dCQUNaRSxxQkFBQUEsK0JBQUFBLFNBQVcsYUFBYTtvQkFBRVUsU0FBU0o7Z0JBQUs7WUFDMUMsT0FBTyxJQUFJTyxXQUFXLFlBQVlBLFdBQVcsbUJBQW1CQSxXQUFXLGFBQWE7Z0JBQ3RGZixZQUFZO2dCQUNaRSxxQkFBQUEsK0JBQUFBLFNBQVcsZ0JBQWdCO29CQUFFVSxTQUFTSjtnQkFBSztZQUM3QztRQUNGO1FBRUFkLFNBQVNzQixJQUFJLENBQUNMO0lBQ2hCO0lBRUEsZUFBZTtJQUNmSixpQkFDRSxhQUNBO1FBQUVVLE9BQU87UUFBS0MsUUFBUTtRQUFVQyxPQUFPO0lBQU8sR0FDOUMsQ0FBQ0MsVUFBWWxCLHFCQUFBQSwrQkFBQUEsU0FBVyxPQUFPa0IsUUFBUUMsR0FBRyxJQUFJRCxRQUFRRSxHQUFHO0lBRzNELG1CQUFtQjtJQUNuQmYsaUJBQ0UsaUJBQ0E7UUFBRVUsT0FBTztRQUFVQyxRQUFRO1FBQVVDLE9BQU87SUFBVyxHQUN2RCxDQUFDQyxVQUFZbEIscUJBQUFBLCtCQUFBQSxTQUFXLFdBQVdrQixRQUFRQyxHQUFHO0lBR2hELDBCQUEwQjtJQUMxQmQsaUJBQ0UsaUJBQ0E7UUFBRVUsT0FBTztRQUFLQyxRQUFRO1FBQVVDLE9BQU87SUFBa0IsR0FDekQsQ0FBQ0MsVUFBWWxCLHFCQUFBQSwrQkFBQUEsU0FBVyxXQUFXa0IsUUFBUUMsR0FBRztJQUdoRCxtQkFBbUI7SUFDbkJFLGNBQWMzQjtJQUNkQSxZQUFZNEIsWUFBWTtRQUN0QixNQUFNQyxPQUFPM0IsS0FBS0MsR0FBRyxLQUFLRjtRQUMxQixJQUFJNEIsT0FBTyxPQUFPO1lBQ2hCckIsUUFBUXNCLElBQUksQ0FBQztZQUNiQyxvQkFBb0J6QjtZQUNwQjtRQUNGO1FBRUFFLFFBQVFDLEdBQUcsQ0FBQztRQUNaUixXQUFXQyxLQUFLQyxHQUFHO0lBQ3JCLEdBQUc7QUFDTDtBQUVBOztDQUVDLEdBQ0QsU0FBUzRCLG9CQUFvQnpCLFFBQVE7SUFDbkNJO0lBQ0FzQixhQUFhakM7SUFDYkEsaUJBQWlCa0MsV0FBVyxJQUFNNUIsa0JBQWtCQyxXQUFXO0FBQ2pFO0FBRUE7O0NBRUMsR0FDTSxTQUFTSTtJQUNkLE1BQU1ILFdBQVdWLHNEQUFXQTtJQUM1QkMsU0FBU29DLE9BQU8sQ0FBQyxDQUFDbkI7UUFDaEIsSUFBSTtZQUNGUixTQUFTNEIsYUFBYSxDQUFDcEI7UUFDekIsRUFBRSxPQUFPcUIsS0FBSztZQUNaNUIsUUFBUXNCLElBQUksQ0FBQyx5QkFBeUJNLElBQUlDLE9BQU87UUFDbkQ7SUFDRjtJQUNBdkMsV0FBVyxFQUFFO0lBQ2I2QixjQUFjM0I7SUFDZGdDLGFBQWFqQztJQUNiUyxRQUFRQyxHQUFHLENBQUM7QUFDZCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9saWIvcmVhbHRpbWVDb3JlLmpzP2QxYmUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gL2xpYi9yZWFsdGltZUNvcmUuanNcclxuaW1wb3J0IHsgZ2V0U3VwYWJhc2UgfSBmcm9tICcuL3N1cGFiYXNlJztcclxuXHJcbmxldCBjaGFubmVscyA9IFtdO1xyXG5sZXQgcmVjb25uZWN0VGltZXIgPSBudWxsO1xyXG5sZXQgcGluZ1RpbWVyID0gbnVsbDtcclxubGV0IGxhc3RQaW5nID0gRGF0ZS5ub3coKTtcclxubGV0IGNvbm5lY3RlZCA9IGZhbHNlO1xyXG5cclxuLyoqXHJcbiAqIPCfjJAgUmVhbHRpbWVDb3JlIHJvYnVzdG8gY29uIGF1dG9yZWNvbmV4acOzbiB5IGxvZ3NcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzdGFydFJlYWx0aW1lQ29yZShvblVwZGF0ZSkge1xyXG4gIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2UoKTtcclxuICBjb25zb2xlLmxvZygn4pqZ77iPIEluaWNpYW5kbyBSZWFsdGltZUNvcmUuLi4nKTtcclxuXHJcbiAgc3RvcFJlYWx0aW1lQ29yZSgpO1xyXG5cclxuICBjb25zdCBzdWJzY3JpYmVDaGFubmVsID0gKG5hbWUsIGNvbmZpZywgaGFuZGxlcikgPT4ge1xyXG4gICAgY29uc3QgY2ggPSBzdXBhYmFzZS5jaGFubmVsKG5hbWUpLm9uKCdwb3N0Z3Jlc19jaGFuZ2VzJywgY29uZmlnLCBoYW5kbGVyKTtcclxuXHJcbiAgICBjaC5zdWJzY3JpYmUoKHN0YXR1cykgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhg8J+ToSBDYW5hbCAke25hbWV9OmAsIHN0YXR1cyk7XHJcbiAgICAgIGlmIChzdGF0dXMgPT09ICdTVUJTQ1JJQkVEJykge1xyXG4gICAgICAgIGNvbm5lY3RlZCA9IHRydWU7XHJcbiAgICAgICAgb25VcGRhdGU/LignY29ubmVjdGVkJywgeyBjaGFubmVsOiBuYW1lIH0pO1xyXG4gICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gJ0NMT1NFRCcgfHwgc3RhdHVzID09PSAnQ0hBTk5FTF9FUlJPUicgfHwgc3RhdHVzID09PSAnVElNRURfT1VUJykge1xyXG4gICAgICAgIGNvbm5lY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgIG9uVXBkYXRlPy4oJ2Rpc2Nvbm5lY3RlZCcsIHsgY2hhbm5lbDogbmFtZSB9KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY2hhbm5lbHMucHVzaChjaCk7XHJcbiAgfTtcclxuXHJcbiAgLy8gPT09IEpvYnMgPT09XHJcbiAgc3Vic2NyaWJlQ2hhbm5lbChcclxuICAgICdjb3JlLWpvYnMnLFxyXG4gICAgeyBldmVudDogJyonLCBzY2hlbWE6ICdwdWJsaWMnLCB0YWJsZTogJ2pvYnMnIH0sXHJcbiAgICAocGF5bG9hZCkgPT4gb25VcGRhdGU/Lignam9iJywgcGF5bG9hZC5uZXcgfHwgcGF5bG9hZC5vbGQpXHJcbiAgKTtcclxuXHJcbiAgLy8gPT09IE1lc3NhZ2VzID09PVxyXG4gIHN1YnNjcmliZUNoYW5uZWwoXHJcbiAgICAnY29yZS1tZXNzYWdlcycsXHJcbiAgICB7IGV2ZW50OiAnSU5TRVJUJywgc2NoZW1hOiAncHVibGljJywgdGFibGU6ICdtZXNzYWdlcycgfSxcclxuICAgIChwYXlsb2FkKSA9PiBvblVwZGF0ZT8uKCdtZXNzYWdlJywgcGF5bG9hZC5uZXcpXHJcbiAgKTtcclxuXHJcbiAgLy8gPT09IFdvcmtlciBwcm9maWxlcyA9PT1cclxuICBzdWJzY3JpYmVDaGFubmVsKFxyXG4gICAgJ2NvcmUtcHJvZmlsZXMnLFxyXG4gICAgeyBldmVudDogJyonLCBzY2hlbWE6ICdwdWJsaWMnLCB0YWJsZTogJ3dvcmtlcl9wcm9maWxlcycgfSxcclxuICAgIChwYXlsb2FkKSA9PiBvblVwZGF0ZT8uKCdwcm9maWxlJywgcGF5bG9hZC5uZXcpXHJcbiAgKTtcclxuXHJcbiAgLy8g4p2k77iPIFBpbmcgY2FkYSAxNXNcclxuICBjbGVhckludGVydmFsKHBpbmdUaW1lcik7XHJcbiAgcGluZ1RpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgY29uc3QgZGlmZiA9IERhdGUubm93KCkgLSBsYXN0UGluZztcclxuICAgIGlmIChkaWZmID4gMzAwMDApIHtcclxuICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gSW5hY3RpdmlkYWQgZGV0ZWN0YWRhLCByZWNvbnN0cnV5ZW5kbyBSZWFsdGltZUNvcmUuLi4nKTtcclxuICAgICAgcmVzdGFydFJlYWx0aW1lQ29yZShvblVwZGF0ZSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zb2xlLmxvZygn8J+UhCBQaW5nIFJlYWx0aW1lIE9LJyk7XHJcbiAgICBsYXN0UGluZyA9IERhdGUubm93KCk7XHJcbiAgfSwgMTUwMDApO1xyXG59XHJcblxyXG4vKipcclxuICog8J+UgSBSZWluaWNpYSB0b2RvIGVsIHNpc3RlbWEgcmVhbHRpbWVcclxuICovXHJcbmZ1bmN0aW9uIHJlc3RhcnRSZWFsdGltZUNvcmUob25VcGRhdGUpIHtcclxuICBzdG9wUmVhbHRpbWVDb3JlKCk7XHJcbiAgY2xlYXJUaW1lb3V0KHJlY29ubmVjdFRpbWVyKTtcclxuICByZWNvbm5lY3RUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4gc3RhcnRSZWFsdGltZUNvcmUob25VcGRhdGUpLCAyMDAwKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIPCfm5EgTGltcGllemEgdG90YWxcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzdG9wUmVhbHRpbWVDb3JlKCkge1xyXG4gIGNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2UoKTtcclxuICBjaGFubmVscy5mb3JFYWNoKChjaCkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgc3VwYWJhc2UucmVtb3ZlQ2hhbm5lbChjaCk7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgY29uc29sZS53YXJuKCdFcnJvciBjZXJyYW5kbyBjYW5hbDonLCBlcnIubWVzc2FnZSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgY2hhbm5lbHMgPSBbXTtcclxuICBjbGVhckludGVydmFsKHBpbmdUaW1lcik7XHJcbiAgY2xlYXJUaW1lb3V0KHJlY29ubmVjdFRpbWVyKTtcclxuICBjb25zb2xlLmxvZygn8J+bkSBSZWFsdGltZUNvcmUgZGV0ZW5pZG8nKTtcclxufVxyXG4iXSwibmFtZXMiOlsiZ2V0U3VwYWJhc2UiLCJjaGFubmVscyIsInJlY29ubmVjdFRpbWVyIiwicGluZ1RpbWVyIiwibGFzdFBpbmciLCJEYXRlIiwibm93IiwiY29ubmVjdGVkIiwic3RhcnRSZWFsdGltZUNvcmUiLCJvblVwZGF0ZSIsInN1cGFiYXNlIiwiY29uc29sZSIsImxvZyIsInN0b3BSZWFsdGltZUNvcmUiLCJzdWJzY3JpYmVDaGFubmVsIiwibmFtZSIsImNvbmZpZyIsImhhbmRsZXIiLCJjaCIsImNoYW5uZWwiLCJvbiIsInN1YnNjcmliZSIsInN0YXR1cyIsInB1c2giLCJldmVudCIsInNjaGVtYSIsInRhYmxlIiwicGF5bG9hZCIsIm5ldyIsIm9sZCIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImRpZmYiLCJ3YXJuIiwicmVzdGFydFJlYWx0aW1lQ29yZSIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJmb3JFYWNoIiwicmVtb3ZlQ2hhbm5lbCIsImVyciIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/realtimeCore.js\n"));

/***/ })

});