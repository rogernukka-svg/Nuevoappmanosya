"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/worker/page",{

/***/ "(app-pages-browser)/./lib/realtimeCore.js":
/*!*****************************!*\
  !*** ./lib/realtimeCore.js ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   startRealtimeCore: function() { return /* binding */ startRealtimeCore; },\n/* harmony export */   stopRealtimeCore: function() { return /* binding */ stopRealtimeCore; }\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(app-pages-browser)/./lib/supabase.js\");\n\nconst supabase = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.getSupabase)();\n/** üîá Toggle r√°pido de logs (d√©jalo en false en prod) */ const DEBUG = false;\nconst log = function() {\n    for(var _len = arguments.length, a = new Array(_len), _key = 0; _key < _len; _key++){\n        a[_key] = arguments[_key];\n    }\n    if (DEBUG) console.log(...a);\n};\nconst warn = function() {\n    for(var _len = arguments.length, a = new Array(_len), _key = 0; _key < _len; _key++){\n        a[_key] = arguments[_key];\n    }\n    if (DEBUG) console.warn(...a);\n};\nlet channels = [];\nlet socket = null;\nlet pingTimer = null;\nlet watchdogTimer = null;\nlet lastHeartbeatAt = 0;\nlet lastStatus = \"unknown\"; // 'connected' | 'disconnected' | 'unknown'\nconst subscribed = new Set();\n/**\r\n * üåê RealtimeCore (silencioso y estable)\r\n * - Conexi√≥n directa al socket\r\n * - Keep-alive por heartbeat\r\n * - Reconstrucci√≥n prudente si todos los canales caen o no hay heartbeat\r\n * - Sin toasts; logs s√≥lo si DEBUG=true\r\n *\r\n * @param {(type: 'connected'|'disconnected'|'worker'|'job'|'message'|'profile', data?: any) => void} onUpdate\r\n * @returns {() => void} cleanup (opcional)\r\n */ function startRealtimeCore(onUpdate) {\n    stopRealtimeCore(); // limpieza previa segura\n    log(\"‚öôÔ∏è RealtimeCore ‚Üí conectando socket...\");\n    socket = supabase.realtime.connect();\n    socket.connect(); // üî• fuerza conexi√≥n temprana para reducir delay\n    const channelConfig = {\n        config: {\n            broadcast: {\n                self: true\n            },\n            presence: {\n                key: Math.random().toString(36).slice(2, 8)\n            },\n            reconnect: true\n        }\n    };\n    /** Suscriptor con manejo de estado global */ const subscribeWithStatus = (name, pgOptions, handler)=>{\n        const ch = supabase.channel(name, channelConfig).on(\"postgres_changes\", pgOptions, (payload)=>{\n            var _payload_new, _ref;\n            // S√≥lo emitimos cuando hay datos nuevos\n            const data = (_ref = (_payload_new = payload === null || payload === void 0 ? void 0 : payload.new) !== null && _payload_new !== void 0 ? _payload_new : payload === null || payload === void 0 ? void 0 : payload.record) !== null && _ref !== void 0 ? _ref : null;\n            if (data != null) handler(data);\n        }).subscribe((status)=>{\n            log(\"canal \".concat(name, \":\"), status);\n            if (status === \"SUBSCRIBED\") {\n                subscribed.add(name);\n                // si es el primer canal en quedar OK ‚Üí connected\n                if (lastStatus !== \"connected\") {\n                    lastStatus = \"connected\";\n                    lastHeartbeatAt = Date.now();\n                    onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(\"connected\", {\n                        channel: name\n                    });\n                    log(\"‚úÖ realtime conectado\");\n                }\n            } else if (status === \"CLOSED\" || status === \"TIMED_OUT\" || status === \"CHANNEL_ERROR\") {\n                subscribed.delete(name);\n                // si no queda ninguno suscripto ‚Üí disconnected\n                if (subscribed.size === 0 && lastStatus !== \"disconnected\") {\n                    lastStatus = \"disconnected\";\n                    onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(\"disconnected\", {\n                        channel: name\n                    });\n                    warn(\"‚ö†Ô∏è realtime desconectado (no hay canales activos)\");\n                }\n            }\n        });\n        return ch;\n    };\n    // === Canales ===\n    const workers = subscribeWithStatus(\"core-workers\", {\n        event: \"*\",\n        schema: \"public\",\n        table: \"worker_profiles\"\n    }, (row)=>onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(\"worker\", row));\n    const jobs = subscribeWithStatus(\"core-jobs\", {\n        event: \"*\",\n        schema: \"public\",\n        table: \"jobs\"\n    }, (row)=>onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(\"job\", row));\n    const messages = subscribeWithStatus(\"core-messages\", {\n        event: \"INSERT\",\n        schema: \"public\",\n        table: \"messages\"\n    }, (row)=>onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(\"message\", row));\n    const profiles = subscribeWithStatus(\"core-profiles\", {\n        event: \"UPDATE\",\n        schema: \"public\",\n        table: \"profiles\"\n    }, (row)=>onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(\"profile\", row));\n    channels = [\n        workers,\n        jobs,\n        messages,\n        profiles\n    ];\n    // üíì Heartbeat cada 10s (silencioso)\n    clearInterval(pingTimer);\n    pingTimer = setInterval(()=>{\n        try {\n            if (socket === null || socket === void 0 ? void 0 : socket.isConnected()) {\n                socket.push({\n                    topic: \"phoenix\",\n                    event: \"heartbeat\",\n                    payload: {},\n                    ref: socket.makeRef()\n                });\n                lastHeartbeatAt = Date.now();\n                log(\"\\uD83D\\uDC93 heartbeat\");\n            } else {\n                warn(\"\\uD83E\\uDDF5 socket no conectado ‚Üí reconnect()\");\n                socket = supabase.realtime.connect();\n                socket.connect(); // vuelve a forzar conexi√≥n si se cae\n            }\n        } catch (e) {\n        /* noop */ }\n    }, 10000);\n    // üõ°Ô∏è Watchdog prudente (cada 20s)\n    clearInterval(watchdogTimer);\n    watchdogTimer = setInterval(()=>{\n        const noHeartbeatFor = Date.now() - lastHeartbeatAt;\n        // Reconstruir s√≥lo si:\n        // 1) no hay canales activos (desconectado real), O\n        // 2) pasaron >30s sin heartbeat (pesta√±a dormida/red inestable)\n        if (subscribed.size === 0 || noHeartbeatFor > 30000) {\n            warn(\"\\uD83E\\uDDEF watchdog ‚Üí reconstruyendo RealtimeCore‚Ä¶\");\n            const cb = onUpdate; // conservar ref\n            stopRealtimeCore();\n            startRealtimeCore(cb);\n        }\n    }, 20000);\n    // Opcional: devolver cleanup compatible\n    return ()=>stopRealtimeCore();\n}\n/** üßπ Limpieza total y segura */ function stopRealtimeCore() {\n    try {\n        channels.forEach((ch)=>supabase.removeChannel(ch));\n        channels = [];\n        subscribed.clear();\n        if (pingTimer) clearInterval(pingTimer);\n        if (watchdogTimer) clearInterval(watchdogTimer);\n        if (socket) {\n            try {\n                socket.disconnect();\n            } catch (e) {}\n            socket = null;\n        }\n        lastStatus = \"unknown\";\n        log(\"\\uD83D\\uDED1 RealtimeCore detenido\");\n    } catch (err) {\n        console.error(\"‚ùå Error al detener RealtimeCore:\", err);\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RixHQUFHO0lBRUgsd0NBQXdDO0lBQ3hDLE9BQU8sSUFBTWhEO0FBQ2Y7QUFFQSwrQkFBK0IsR0FDeEIsU0FBU0E7SUFDZCxJQUFJO1FBQ0ZWLFNBQVMyRCxPQUFPLENBQUMsQ0FBQy9CLEtBQU9sQyxTQUFTa0UsYUFBYSxDQUFDaEM7UUFDaEQ1QixXQUFXLEVBQUU7UUFDYk0sV0FBV3VELEtBQUs7UUFFaEIsSUFBSTNELFdBQVdnRCxjQUFjaEQ7UUFDN0IsSUFBSUMsZUFBZStDLGNBQWMvQztRQUVqQyxJQUFJRixRQUFRO1lBQ1YsSUFBSTtnQkFBRUEsT0FBTzZELFVBQVU7WUFBSSxFQUFFLFVBQU0sQ0FBQztZQUNwQzdELFNBQVM7UUFDWDtRQUVBSSxhQUFhO1FBQ2JULElBQUk7SUFDTixFQUFFLE9BQU9tRSxLQUFLO1FBQ1pqRSxRQUFRa0UsS0FBSyxDQUFDLG9DQUFvQ0Q7SUFDcEQ7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9saWIvcmVhbHRpbWVDb3JlLmpzP2QxYmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0U3VwYWJhc2UgfSBmcm9tICcuL3N1cGFiYXNlJztcclxuXHJcbmNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2UoKTtcclxuXHJcbi8qKiDwn5SHIFRvZ2dsZSByw6FwaWRvIGRlIGxvZ3MgKGTDqWphbG8gZW4gZmFsc2UgZW4gcHJvZCkgKi9cclxuY29uc3QgREVCVUcgPSBmYWxzZTtcclxuY29uc3QgbG9nICA9ICguLi5hKSA9PiB7IGlmIChERUJVRykgY29uc29sZS5sb2coLi4uYSk7IH07XHJcbmNvbnN0IHdhcm4gPSAoLi4uYSkgPT4geyBpZiAoREVCVUcpIGNvbnNvbGUud2FybiguLi5hKTsgfTtcclxuXHJcbmxldCBjaGFubmVscyA9IFtdO1xyXG5sZXQgc29ja2V0ID0gbnVsbDtcclxubGV0IHBpbmdUaW1lciA9IG51bGw7XHJcbmxldCB3YXRjaGRvZ1RpbWVyID0gbnVsbDtcclxuXHJcbmxldCBsYXN0SGVhcnRiZWF0QXQgPSAwO1xyXG5sZXQgbGFzdFN0YXR1cyA9ICd1bmtub3duJzsgICAgICAgICAgLy8gJ2Nvbm5lY3RlZCcgfCAnZGlzY29ubmVjdGVkJyB8ICd1bmtub3duJ1xyXG5jb25zdCBzdWJzY3JpYmVkID0gbmV3IFNldCgpO1xyXG5cclxuLyoqXHJcbiAqIPCfjJAgUmVhbHRpbWVDb3JlIChzaWxlbmNpb3NvIHkgZXN0YWJsZSlcclxuICogLSBDb25leGnDs24gZGlyZWN0YSBhbCBzb2NrZXRcclxuICogLSBLZWVwLWFsaXZlIHBvciBoZWFydGJlYXRcclxuICogLSBSZWNvbnN0cnVjY2nDs24gcHJ1ZGVudGUgc2kgdG9kb3MgbG9zIGNhbmFsZXMgY2FlbiBvIG5vIGhheSBoZWFydGJlYXRcclxuICogLSBTaW4gdG9hc3RzOyBsb2dzIHPDs2xvIHNpIERFQlVHPXRydWVcclxuICpcclxuICogQHBhcmFtIHsodHlwZTogJ2Nvbm5lY3RlZCd8J2Rpc2Nvbm5lY3RlZCd8J3dvcmtlcid8J2pvYid8J21lc3NhZ2UnfCdwcm9maWxlJywgZGF0YT86IGFueSkgPT4gdm9pZH0gb25VcGRhdGVcclxuICogQHJldHVybnMgeygpID0+IHZvaWR9IGNsZWFudXAgKG9wY2lvbmFsKVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0UmVhbHRpbWVDb3JlKG9uVXBkYXRlKSB7XHJcbiAgc3RvcFJlYWx0aW1lQ29yZSgpOyAvLyBsaW1waWV6YSBwcmV2aWEgc2VndXJhXHJcblxyXG4gIGxvZygn4pqZ77iPIFJlYWx0aW1lQ29yZSDihpIgY29uZWN0YW5kbyBzb2NrZXQuLi4nKTtcclxuICBzb2NrZXQgPSBzdXBhYmFzZS5yZWFsdGltZS5jb25uZWN0KCk7XHJcbiAgc29ja2V0LmNvbm5lY3QoKTsgLy8g8J+UpSBmdWVyemEgY29uZXhpw7NuIHRlbXByYW5hIHBhcmEgcmVkdWNpciBkZWxheVxyXG5cclxuICBjb25zdCBjaGFubmVsQ29uZmlnID0ge1xyXG4gICAgY29uZmlnOiB7XHJcbiAgICAgIGJyb2FkY2FzdDogeyBzZWxmOiB0cnVlIH0sXHJcbiAgICAgIHByZXNlbmNlIDogeyBrZXk6IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIsIDgpIH0sXHJcbiAgICAgIHJlY29ubmVjdDogdHJ1ZSxcclxuICAgIH0sXHJcbiAgfTtcclxuXHJcbiAgLyoqIFN1c2NyaXB0b3IgY29uIG1hbmVqbyBkZSBlc3RhZG8gZ2xvYmFsICovXHJcbiAgY29uc3Qgc3Vic2NyaWJlV2l0aFN0YXR1cyA9IChuYW1lLCBwZ09wdGlvbnMsIGhhbmRsZXIpID0+IHtcclxuICAgIGNvbnN0IGNoID0gc3VwYWJhc2VcclxuICAgICAgLmNoYW5uZWwobmFtZSwgY2hhbm5lbENvbmZpZylcclxuICAgICAgLm9uKCdwb3N0Z3Jlc19jaGFuZ2VzJywgcGdPcHRpb25zLCAocGF5bG9hZCkgPT4ge1xyXG4gICAgICAgIC8vIFPDs2xvIGVtaXRpbW9zIGN1YW5kbyBoYXkgZGF0b3MgbnVldm9zXHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHBheWxvYWQ/Lm5ldyA/PyBwYXlsb2FkPy5yZWNvcmQgPz8gbnVsbDtcclxuICAgICAgICBpZiAoZGF0YSAhPSBudWxsKSBoYW5kbGVyKGRhdGEpO1xyXG4gICAgICB9KVxyXG4gICAgICAuc3Vic2NyaWJlKChzdGF0dXMpID0+IHtcclxuICAgICAgICBsb2coYGNhbmFsICR7bmFtZX06YCwgc3RhdHVzKTtcclxuXHJcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ1NVQlNDUklCRUQnKSB7XHJcbiAgICAgICAgICBzdWJzY3JpYmVkLmFkZChuYW1lKTtcclxuICAgICAgICAgIC8vIHNpIGVzIGVsIHByaW1lciBjYW5hbCBlbiBxdWVkYXIgT0sg4oaSIGNvbm5lY3RlZFxyXG4gICAgICAgICAgaWYgKGxhc3RTdGF0dXMgIT09ICdjb25uZWN0ZWQnKSB7XHJcbiAgICAgICAgICAgIGxhc3RTdGF0dXMgPSAnY29ubmVjdGVkJztcclxuICAgICAgICAgICAgbGFzdEhlYXJ0YmVhdEF0ID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgb25VcGRhdGU/LignY29ubmVjdGVkJywgeyBjaGFubmVsOiBuYW1lIH0pO1xyXG4gICAgICAgICAgICBsb2coJ+KchSByZWFsdGltZSBjb25lY3RhZG8nKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gJ0NMT1NFRCcgfHwgc3RhdHVzID09PSAnVElNRURfT1VUJyB8fCBzdGF0dXMgPT09ICdDSEFOTkVMX0VSUk9SJykge1xyXG4gICAgICAgICAgc3Vic2NyaWJlZC5kZWxldGUobmFtZSk7XHJcbiAgICAgICAgICAvLyBzaSBubyBxdWVkYSBuaW5ndW5vIHN1c2NyaXB0byDihpIgZGlzY29ubmVjdGVkXHJcbiAgICAgICAgICBpZiAoc3Vic2NyaWJlZC5zaXplID09PSAwICYmIGxhc3RTdGF0dXMgIT09ICdkaXNjb25uZWN0ZWQnKSB7XHJcbiAgICAgICAgICAgIGxhc3RTdGF0dXMgPSAnZGlzY29ubmVjdGVkJztcclxuICAgICAgICAgICAgb25VcGRhdGU/LignZGlzY29ubmVjdGVkJywgeyBjaGFubmVsOiBuYW1lIH0pO1xyXG4gICAgICAgICAgICB3YXJuKCfimqDvuI8gcmVhbHRpbWUgZGVzY29uZWN0YWRvIChubyBoYXkgY2FuYWxlcyBhY3Rpdm9zKScpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGNoO1xyXG4gIH07XHJcblxyXG4gIC8vID09PSBDYW5hbGVzID09PVxyXG4gIGNvbnN0IHdvcmtlcnMgPSBzdWJzY3JpYmVXaXRoU3RhdHVzKFxyXG4gICAgJ2NvcmUtd29ya2VycycsXHJcbiAgICB7IGV2ZW50OiAnKicsIHNjaGVtYTogJ3B1YmxpYycsIHRhYmxlOiAnd29ya2VyX3Byb2ZpbGVzJyB9LFxyXG4gICAgKHJvdykgPT4gb25VcGRhdGU/Lignd29ya2VyJywgcm93KVxyXG4gICk7XHJcbiAgY29uc3Qgam9icyA9IHN1YnNjcmliZVdpdGhTdGF0dXMoXHJcbiAgICAnY29yZS1qb2JzJyxcclxuICAgIHsgZXZlbnQ6ICcqJywgc2NoZW1hOiAncHVibGljJywgdGFibGU6ICdqb2JzJyB9LFxyXG4gICAgKHJvdykgPT4gb25VcGRhdGU/Lignam9iJywgcm93KVxyXG4gICk7XHJcbiAgY29uc3QgbWVzc2FnZXMgPSBzdWJzY3JpYmVXaXRoU3RhdHVzKFxyXG4gICAgJ2NvcmUtbWVzc2FnZXMnLFxyXG4gICAgeyBldmVudDogJ0lOU0VSVCcsIHNjaGVtYTogJ3B1YmxpYycsIHRhYmxlOiAnbWVzc2FnZXMnIH0sXHJcbiAgICAocm93KSA9PiBvblVwZGF0ZT8uKCdtZXNzYWdlJywgcm93KVxyXG4gICk7XHJcbiAgY29uc3QgcHJvZmlsZXMgPSBzdWJzY3JpYmVXaXRoU3RhdHVzKFxyXG4gICAgJ2NvcmUtcHJvZmlsZXMnLFxyXG4gICAgeyBldmVudDogJ1VQREFURScsIHNjaGVtYTogJ3B1YmxpYycsIHRhYmxlOiAncHJvZmlsZXMnIH0sXHJcbiAgICAocm93KSA9PiBvblVwZGF0ZT8uKCdwcm9maWxlJywgcm93KVxyXG4gICk7XHJcblxyXG4gIGNoYW5uZWxzID0gW3dvcmtlcnMsIGpvYnMsIG1lc3NhZ2VzLCBwcm9maWxlc107XHJcblxyXG4gIC8vIPCfkpMgSGVhcnRiZWF0IGNhZGEgMTBzIChzaWxlbmNpb3NvKVxyXG4gIGNsZWFySW50ZXJ2YWwocGluZ1RpbWVyKTtcclxuICBwaW5nVGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBpZiAoc29ja2V0Py5pc0Nvbm5lY3RlZCgpKSB7XHJcbiAgICAgICAgc29ja2V0LnB1c2goeyB0b3BpYzogJ3Bob2VuaXgnLCBldmVudDogJ2hlYXJ0YmVhdCcsIHBheWxvYWQ6IHt9LCByZWY6IHNvY2tldC5tYWtlUmVmKCkgfSk7XHJcbiAgICAgICAgbGFzdEhlYXJ0YmVhdEF0ID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBsb2coJ/CfkpMgaGVhcnRiZWF0Jyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgd2Fybign8J+ntSBzb2NrZXQgbm8gY29uZWN0YWRvIOKGkiByZWNvbm5lY3QoKScpO1xyXG4gICAgICAgIHNvY2tldCA9IHN1cGFiYXNlLnJlYWx0aW1lLmNvbm5lY3QoKTtcclxuICAgICAgICBzb2NrZXQuY29ubmVjdCgpOyAvLyB2dWVsdmUgYSBmb3J6YXIgY29uZXhpw7NuIHNpIHNlIGNhZVxyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIHtcclxuICAgICAgLyogbm9vcCAqL1xyXG4gICAgfVxyXG4gIH0sIDEwMDAwKTtcclxuXHJcbiAgLy8g8J+boe+4jyBXYXRjaGRvZyBwcnVkZW50ZSAoY2FkYSAyMHMpXHJcbiAgY2xlYXJJbnRlcnZhbCh3YXRjaGRvZ1RpbWVyKTtcclxuICB3YXRjaGRvZ1RpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgY29uc3Qgbm9IZWFydGJlYXRGb3IgPSBEYXRlLm5vdygpIC0gbGFzdEhlYXJ0YmVhdEF0O1xyXG5cclxuICAgIC8vIFJlY29uc3RydWlyIHPDs2xvIHNpOlxyXG4gICAgLy8gMSkgbm8gaGF5IGNhbmFsZXMgYWN0aXZvcyAoZGVzY29uZWN0YWRvIHJlYWwpLCBPXHJcbiAgICAvLyAyKSBwYXNhcm9uID4zMHMgc2luIGhlYXJ0YmVhdCAocGVzdGHDsWEgZG9ybWlkYS9yZWQgaW5lc3RhYmxlKVxyXG4gICAgaWYgKHN1YnNjcmliZWQuc2l6ZSA9PT0gMCB8fCBub0hlYXJ0YmVhdEZvciA+IDMwMDAwKSB7XHJcbiAgICAgIHdhcm4oJ/Cfp68gd2F0Y2hkb2cg4oaSIHJlY29uc3RydXllbmRvIFJlYWx0aW1lQ29yZeKApicpO1xyXG4gICAgICBjb25zdCBjYiA9IG9uVXBkYXRlOyAvLyBjb25zZXJ2YXIgcmVmXHJcbiAgICAgIHN0b3BSZWFsdGltZUNvcmUoKTtcclxuICAgICAgc3RhcnRSZWFsdGltZUNvcmUoY2IpO1xyXG4gICAgfVxyXG4gIH0sIDIwMDAwKTtcclxuXHJcbiAgLy8gT3BjaW9uYWw6IGRldm9sdmVyIGNsZWFudXAgY29tcGF0aWJsZVxyXG4gIHJldHVybiAoKSA9PiBzdG9wUmVhbHRpbWVDb3JlKCk7XHJcbn1cclxuXHJcbi8qKiDwn6e5IExpbXBpZXphIHRvdGFsIHkgc2VndXJhICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzdG9wUmVhbHRpbWVDb3JlKCkge1xyXG4gIHRyeSB7XHJcbiAgICBjaGFubmVscy5mb3JFYWNoKChjaCkgPT4gc3VwYWJhc2UucmVtb3ZlQ2hhbm5lbChjaCkpO1xyXG4gICAgY2hhbm5lbHMgPSBbXTtcclxuICAgIHN1YnNjcmliZWQuY2xlYXIoKTtcclxuXHJcbiAgICBpZiAocGluZ1RpbWVyKSBjbGVhckludGVydmFsKHBpbmdUaW1lcik7XHJcbiAgICBpZiAod2F0Y2hkb2dUaW1lcikgY2xlYXJJbnRlcnZhbCh3YXRjaGRvZ1RpbWVyKTtcclxuXHJcbiAgICBpZiAoc29ja2V0KSB7XHJcbiAgICAgIHRyeSB7IHNvY2tldC5kaXNjb25uZWN0KCk7IH0gY2F0Y2gge31cclxuICAgICAgc29ja2V0ID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBsYXN0U3RhdHVzID0gJ3Vua25vd24nO1xyXG4gICAgbG9nKCfwn5uRIFJlYWx0aW1lQ29yZSBkZXRlbmlkbycpO1xyXG4gIH0gY2F0Y2ggKGVycikge1xyXG4gICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGFsIGRldGVuZXIgUmVhbHRpbWVDb3JlOicsIGVycik7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJnZXRTdXBhYmFzZSIsInN1cGFiYXNlIiwiREVCVUciLCJsb2ciLCJhIiwiY29uc29sZSIsIndhcm4iLCJjaGFubmVscyIsInNvY2tldCIsInBpbmdUaW1lciIsIndhdGNoZG9nVGltZXIiLCJsYXN0SGVhcnRiZWF0QXQiLCJsYXN0U3RhdHVzIiwic3Vic2NyaWJlZCIsIlNldCIsInN0YXJ0UmVhbHRpbWVDb3JlIiwib25VcGRhdGUiLCJzdG9wUmVhbHRpbWVDb3JlIiwicmVhbHRpbWUiLCJjb25uZWN0IiwiY2hhbm5lbENvbmZpZyIsImNvbmZpZyIsImJyb2FkY2FzdCIsInNlbGYiLCJwcmVzZW5jZSIsImtleSIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInNsaWNlIiwicmVjb25uZWN0Iiwic3Vic2NyaWJlV2l0aFN0YXR1cyIsIm5hbWUiLCJwZ09wdGlvbnMiLCJoYW5kbGVyIiwiY2giLCJjaGFubmVsIiwib24iLCJwYXlsb2FkIiwiZGF0YSIsIm5ldyIsInJlY29yZCIsInN1YnNjcmliZSIsInN0YXR1cyIsImFkZCIsIkRhdGUiLCJub3ciLCJkZWxldGUiLCJzaXplIiwid29ya2VycyIsImV2ZW50Iiwic2NoZW1hIiwidGFibGUiLCJyb3ciLCJqb2JzIiwibWVzc2FnZXMiLCJwcm9maWxlcyIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImlzQ29ubmVjdGVkIiwicHVzaCIsInRvcGljIiwicmVmIiwibWFrZVJlZiIsIm5vSGVhcnRiZWF0Rm9yIiwiY2IiLCJmb3JFYWNoIiwicmVtb3ZlQ2hhbm5lbCIsImNsZWFyIiwiZGlzY29ubmVjdCIsImVyciIsImVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/realtimeCore.js\n"));

/***/ })

});