"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/client/page",{

/***/ "(app-pages-browser)/./lib/realtimeCore.js":
/*!*****************************!*\
  !*** ./lib/realtimeCore.js ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   startRealtimeCore: function() { return /* binding */ startRealtimeCore; },\n/* harmony export */   stopRealtimeCore: function() { return /* binding */ stopRealtimeCore; }\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(app-pages-browser)/./lib/supabase.js\");\n/* harmony import */ var sonner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sonner */ \"(app-pages-browser)/./node_modules/sonner/dist/index.mjs\");\n\n // ✅ para mostrar mensajes visuales\nconst supabase = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.getSupabase)();\nlet channels = [];\nlet socket = null;\nlet pingTimer = null;\nlet reconnectTimer = null;\nlet connectedCount = 0;\nlet lastPing = 0;\n/**\r\n * 🌐 Núcleo Realtime v3\r\n * - Conexión directa al socket\r\n * - Keep-alive por ping\r\n * - Reconexión automática si la pestaña duerme\r\n * - Notificaciones visuales con sonner\r\n */ function startRealtimeCore(onUpdate) {\n    stopRealtimeCore(); // limpiar\n    console.log(\"⚙️ Iniciando RealtimeCore...\");\n    socket = supabase.realtime.connect();\n    sonner__WEBPACK_IMPORTED_MODULE_1__.toast.info(\"Conectando a tiempo real...\");\n    const config = {\n        config: {\n            broadcast: {\n                self: true\n            },\n            presence: {\n                key: Math.random().toString(36).substring(2, 8)\n            },\n            reconnect: true\n        }\n    };\n    const subscribeWithStatus = (name, options, handler)=>{\n        const ch = supabase.channel(name, config).on(\"postgres_changes\", options, (payload)=>{\n            if (payload.new) handler(payload);\n        }).subscribe((status)=>{\n            console.log(\"⚡ Canal \".concat(name, \":\"), status);\n            if (status === \"SUBSCRIBED\") {\n                connectedCount++;\n                if (connectedCount === 1) {\n                    sonner__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"Conexi\\xf3n a tiempo real establecida ✅\");\n                    onUpdate(\"connected\", {\n                        channel: name,\n                        connectedCount\n                    });\n                }\n            } else if ([\n                \"CLOSED\",\n                \"TIMED_OUT\",\n                \"CHANNEL_ERROR\"\n            ].includes(status)) {\n                connectedCount = Math.max(0, connectedCount - 1);\n                sonner__WEBPACK_IMPORTED_MODULE_1__.toast.warning(\"Perdida de conexi\\xf3n, reintentando...\");\n                onUpdate(\"disconnected\", {\n                    channel: name,\n                    connectedCount\n                });\n            }\n        });\n        return ch;\n    };\n    // === Canales ===\n    const workers = subscribeWithStatus(\"core-workers\", {\n        event: \"*\",\n        schema: \"public\",\n        table: \"worker_profiles\"\n    }, (payload)=>onUpdate(\"worker\", payload.new));\n    const jobs = subscribeWithStatus(\"core-jobs\", {\n        event: \"*\",\n        schema: \"public\",\n        table: \"jobs\"\n    }, (payload)=>onUpdate(\"job\", payload.new));\n    const messages = subscribeWithStatus(\"core-messages\", {\n        event: \"INSERT\",\n        schema: \"public\",\n        table: \"messages\"\n    }, (payload)=>onUpdate(\"message\", payload.new));\n    const profiles = subscribeWithStatus(\"core-profiles\", {\n        event: \"UPDATE\",\n        schema: \"public\",\n        table: \"profiles\"\n    }, (payload)=>onUpdate(\"profile\", payload.new));\n    channels = [\n        workers,\n        jobs,\n        messages,\n        profiles\n    ];\n    // 💓 Keep-alive cada 10 s\n    clearInterval(pingTimer);\n    pingTimer = setInterval(()=>{\n        try {\n            const now = Date.now();\n            if (socket && socket.isConnected()) {\n                socket.push({\n                    topic: \"phoenix\",\n                    event: \"heartbeat\",\n                    payload: {},\n                    ref: socket.makeRef()\n                });\n                lastPing = now;\n                console.log(\"\\uD83D\\uDC93 Ping socket OK\");\n            } else {\n                console.warn(\"⚠️ Socket desconectado, reconectando...\");\n                socket = supabase.realtime.connect();\n            }\n        } catch (err) {\n            console.warn(\"❌ Error en ping:\", err.message);\n        }\n    }, 10000);\n    // 🔁 Reintento global si todos los canales mueren\n    clearInterval(reconnectTimer);\n    reconnectTimer = setInterval(()=>{\n        const elapsed = Date.now() - lastPing;\n        if (connectedCount === 0 || elapsed > 30000) {\n            console.warn(\"\\uD83D\\uDEA8 Sin actividad, reconstruyendo RealtimeCore...\");\n            sonner__WEBPACK_IMPORTED_MODULE_1__.toast.warning(\"Reconectando al servidor de tiempo real...\");\n            stopRealtimeCore();\n            startRealtimeCore(onUpdate);\n        }\n    }, 12000);\n}\n/** 🔻 Limpieza */ function stopRealtimeCore() {\n    channels.forEach((ch)=>supabase.removeChannel(ch));\n    channels = [];\n    connectedCount = 0;\n    if (pingTimer) clearInterval(pingTimer);\n    if (reconnectTimer) clearInterval(reconnectTimer);\n    if (socket) {\n        socket.disconnect();\n        socket = null;\n    }\n    console.log(\"\\uD83D\\uDED1 RealtimeCore detenido\");\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/realtimeCore.js\n"));

/***/ })

});