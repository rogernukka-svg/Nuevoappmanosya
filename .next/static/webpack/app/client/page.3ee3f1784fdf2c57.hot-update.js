"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/client/page",{

/***/ "(app-pages-browser)/./lib/realtimeCore.js":
/*!*****************************!*\
  !*** ./lib/realtimeCore.js ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   startRealtimeCore: function() { return /* binding */ startRealtimeCore; },\n/* harmony export */   stopRealtimeCore: function() { return /* binding */ stopRealtimeCore; }\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(app-pages-browser)/./lib/supabase.js\");\n\nconst supabase = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.getSupabase)();\nlet channels = [];\nlet reconnectTimer = null;\n/**\r\n * 🌐 Inicia el núcleo de sincronización global (workers, jobs, mensajes, perfiles)\r\n * Mantiene los canales vivos, detecta desconexiones y reconecta automáticamente.\r\n * @param {(type: string, data: any) => void} onUpdate Callback que recibe los cambios en tiempo real\r\n */ function startRealtimeCore(onUpdate) {\n    stopRealtimeCore(); // limpia canales previos\n    const config = {\n        config: {\n            broadcast: {\n                self: true\n            },\n            presence: {\n                key: Math.random().toString(36).substring(2, 8)\n            },\n            reconnect: true\n        }\n    };\n    const subscribeWithLog = (name, options, handler)=>{\n        const ch = supabase.channel(name, config).on(\"postgres_changes\", options, (payload)=>{\n            handler(payload);\n        }).subscribe((status)=>{\n            console.log(\"⚡ \".concat(name, \":\"), status);\n            if (status === \"SUBSCRIBED\") {\n                onUpdate(\"connected\", {\n                    channel: name\n                });\n            } else if (status === \"CLOSED\" || status === \"TIMED_OUT\" || status === \"CHANNEL_ERROR\") {\n                onUpdate(\"disconnected\", {\n                    channel: name\n                });\n            }\n        });\n        return ch;\n    };\n    const workers = subscribeWithLog(\"core-workers\", {\n        event: \"*\",\n        schema: \"public\",\n        table: \"worker_profiles\"\n    }, (payload)=>payload.new && onUpdate(\"worker\", payload.new));\n    const jobs = subscribeWithLog(\"core-jobs\", {\n        event: \"*\",\n        schema: \"public\",\n        table: \"jobs\"\n    }, (payload)=>payload.new && onUpdate(\"job\", payload.new));\n    const messages = subscribeWithLog(\"core-messages\", {\n        event: \"INSERT\",\n        schema: \"public\",\n        table: \"messages\"\n    }, (payload)=>payload.new && onUpdate(\"message\", payload.new));\n    const profiles = subscribeWithLog(\"core-profiles\", {\n        event: \"UPDATE\",\n        schema: \"public\",\n        table: \"profiles\"\n    }, (payload)=>payload.new && onUpdate(\"profile\", payload.new));\n    channels = [\n        workers,\n        jobs,\n        messages,\n        profiles\n    ];\n    console.log(\"✅ RealtimeCore iniciado y monitoreando conexi\\xf3n\");\n    // 🧠 Detección de desconexión global del socket\n    supabase.realtime.onOpen(()=>{\n        console.log(\"\\uD83C\\uDF10 Socket Realtime conectado\");\n        onUpdate(\"connected\", {\n            channel: \"socket\"\n        });\n    });\n    supabase.realtime.onClose(()=>{\n        console.warn(\"\\uD83D\\uDEAB Socket Realtime cerrado\");\n        onUpdate(\"disconnected\", {\n            channel: \"socket\"\n        });\n        // Intentar reconexión manual cada 5s si se corta todo\n        if (!reconnectTimer) {\n            reconnectTimer = setInterval(async ()=>{\n                try {\n                    console.log(\"\\uD83D\\uDD04 Intentando reconectar Realtime...\");\n                    stopRealtimeCore();\n                    startRealtimeCore(onUpdate);\n                } catch (e) {\n                    console.warn(\"Error en reconexi\\xf3n:\", e.message);\n                }\n            }, 5000);\n        }\n    });\n    supabase.realtime.onError(()=>{\n        console.warn(\"⚠️ Error en conexi\\xf3n Realtime\");\n        onUpdate(\"disconnected\", {\n            channel: \"socket\"\n        });\n    });\n}\n/** 🔻 Detiene todos los canales activos */ function stopRealtimeCore() {\n    channels.forEach((ch)=>supabase.removeChannel(ch));\n    channels = [];\n    if (reconnectTimer) {\n        clearInterval(reconnectTimer);\n        reconnectTimer = null;\n    }\n    console.log(\"\\uD83D\\uDED1 RealtimeCore detenido\");\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/realtimeCore.js\n"));

/***/ })

});