"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/client/page",{

/***/ "(app-pages-browser)/./lib/realtimeCore.js":
/*!*****************************!*\
  !*** ./lib/realtimeCore.js ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   startRealtimeCore: function() { return /* binding */ startRealtimeCore; },\n/* harmony export */   stopRealtimeCore: function() { return /* binding */ stopRealtimeCore; }\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(app-pages-browser)/./lib/supabase.js\");\n\nconst supabase = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.getSupabase)();\nlet channels = [];\n/**\r\n * 🌐 Inicia el núcleo de sincronización global (workers, jobs, mensajes, perfiles)\r\n * Mantiene los canales en vivo, incluso si se minimiza la app o hay reconexión.\r\n * @param {(type: string, data: any) => void} onUpdate Callback que recibe los cambios en tiempo real\r\n */ function startRealtimeCore(onUpdate) {\n    stopRealtimeCore(); // limpia canales previos\n    const config = {\n        config: {\n            broadcast: {\n                self: true\n            },\n            presence: {\n                key: Math.random().toString(36).substring(2, 8)\n            },\n            reconnect: true\n        }\n    };\n    /** 🔌 Helper: crea canal y loguea conexión */ const subscribeWithLog = (name, options, handler)=>{\n        const ch = supabase.channel(name, config).on(\"postgres_changes\", options, (payload)=>{\n            handler(payload);\n        }).subscribe((status)=>{\n            console.log(\"⚡ \".concat(name, \":\"), status);\n            if (status === \"SUBSCRIBED\") onUpdate(\"connected\", {\n                channel: name\n            });\n        });\n        return ch;\n    };\n    // 👷 Trabajadores (ubicación, estado)\n    const workers = subscribeWithLog(\"core-workers\", {\n        event: \"*\",\n        schema: \"public\",\n        table: \"worker_profiles\"\n    }, (payload)=>{\n        if (payload.new) onUpdate(\"worker\", payload.new);\n    });\n    // 🧾 Pedidos (jobs)\n    const jobs = subscribeWithLog(\"core-jobs\", {\n        event: \"*\",\n        schema: \"public\",\n        table: \"jobs\"\n    }, (payload)=>{\n        if (payload.new) onUpdate(\"job\", payload.new);\n    });\n    // 💬 Mensajes (chat)\n    const messages = subscribeWithLog(\"core-messages\", {\n        event: \"INSERT\",\n        schema: \"public\",\n        table: \"messages\"\n    }, (payload)=>{\n        if (payload.new) onUpdate(\"message\", payload.new);\n    });\n    // 👤 Perfiles base (nombre, avatar, rol)\n    const profiles = subscribeWithLog(\"core-profiles\", {\n        event: \"UPDATE\",\n        schema: \"public\",\n        table: \"profiles\"\n    }, (payload)=>{\n        if (payload.new) onUpdate(\"profile\", payload.new);\n    });\n    channels = [\n        workers,\n        jobs,\n        messages,\n        profiles\n    ];\n    console.log(\"✅ RealtimeCore iniciado y sincronizando en vivo\");\n}\n/** 🔻 Detiene todos los canales activos */ function stopRealtimeCore() {\n    channels.forEach((ch)=>supabase.removeChannel(ch));\n    channels = [];\n    console.log(\"\\uD83D\\uDED1 RealtimeCore detenido\");\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9yZWFsdGltZUNvcmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXlDO0FBQ3pDLE1BQU1DLFdBQVdELHNEQUFXQTtBQUU1QixJQUFJRSxXQUFXLEVBQUU7QUFFakI7Ozs7Q0FJQyxHQUNNLFNBQVNDLGtCQUFrQkMsUUFBUTtJQUN4Q0Msb0JBQW9CLHlCQUF5QjtJQUU3QyxNQUFNQyxTQUFTO1FBQ2JBLFFBQVE7WUFDTkMsV0FBVztnQkFBRUMsTUFBTTtZQUFLO1lBQ3hCQyxVQUFVO2dCQUFFQyxLQUFLQyxLQUFLQyxNQUFNLEdBQUdDLFFBQVEsQ0FBQyxJQUFJQyxTQUFTLENBQUMsR0FBRztZQUFHO1lBQzVEQyxXQUFXO1FBQ2I7SUFDRjtJQUVBLDRDQUE0QyxHQUM1QyxNQUFNQyxtQkFBbUIsQ0FBQ0MsTUFBTUMsU0FBU0M7UUFDdkMsTUFBTUMsS0FBS25CLFNBQ1JvQixPQUFPLENBQUNKLE1BQU1YLFFBQ2RnQixFQUFFLENBQUMsb0JBQW9CSixTQUFTLENBQUNLO1lBQ2hDSixRQUFRSTtRQUNWLEdBQ0NDLFNBQVMsQ0FBQyxDQUFDQztZQUNWQyxRQUFRQyxHQUFHLENBQUMsS0FBVSxPQUFMVixNQUFLLE1BQUlRO1lBQzFCLElBQUlBLFdBQVcsY0FBY3JCLFNBQVMsYUFBYTtnQkFBRWlCLFNBQVNKO1lBQUs7UUFDckU7UUFDRixPQUFPRztJQUNUO0lBRUEsc0NBQXNDO0lBQ3RDLE1BQU1RLFVBQVVaLGlCQUNkLGdCQUNBO1FBQUVhLE9BQU87UUFBS0MsUUFBUTtRQUFVQyxPQUFPO0lBQWtCLEdBQ3pELENBQUNSO1FBQ0MsSUFBSUEsUUFBUVMsR0FBRyxFQUFFNUIsU0FBUyxVQUFVbUIsUUFBUVMsR0FBRztJQUNqRDtJQUdGLG9CQUFvQjtJQUNwQixNQUFNQyxPQUFPakIsaUJBQ1gsYUFDQTtRQUFFYSxPQUFPO1FBQUtDLFFBQVE7UUFBVUMsT0FBTztJQUFPLEdBQzlDLENBQUNSO1FBQ0MsSUFBSUEsUUFBUVMsR0FBRyxFQUFFNUIsU0FBUyxPQUFPbUIsUUFBUVMsR0FBRztJQUM5QztJQUdGLHFCQUFxQjtJQUNyQixNQUFNRSxXQUFXbEIsaUJBQ2YsaUJBQ0E7UUFBRWEsT0FBTztRQUFVQyxRQUFRO1FBQVVDLE9BQU87SUFBVyxHQUN2RCxDQUFDUjtRQUNDLElBQUlBLFFBQVFTLEdBQUcsRUFBRTVCLFNBQVMsV0FBV21CLFFBQVFTLEdBQUc7SUFDbEQ7SUFHRix5Q0FBeUM7SUFDekMsTUFBTUcsV0FBV25CLGlCQUNmLGlCQUNBO1FBQUVhLE9BQU87UUFBVUMsUUFBUTtRQUFVQyxPQUFPO0lBQVcsR0FDdkQsQ0FBQ1I7UUFDQyxJQUFJQSxRQUFRUyxHQUFHLEVBQUU1QixTQUFTLFdBQVdtQixRQUFRUyxHQUFHO0lBQ2xEO0lBR0Y5QixXQUFXO1FBQUMwQjtRQUFTSztRQUFNQztRQUFVQztLQUFTO0lBQzlDVCxRQUFRQyxHQUFHLENBQUM7QUFDZDtBQUVBLHlDQUF5QyxHQUNsQyxTQUFTdEI7SUFDZEgsU0FBU2tDLE9BQU8sQ0FBQyxDQUFDaEIsS0FBT25CLFNBQVNvQyxhQUFhLENBQUNqQjtJQUNoRGxCLFdBQVcsRUFBRTtJQUNid0IsUUFBUUMsR0FBRyxDQUFDO0FBQ2QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbGliL3JlYWx0aW1lQ29yZS5qcz9kMWJlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldFN1cGFiYXNlIH0gZnJvbSAnLi9zdXBhYmFzZSc7XHJcbmNvbnN0IHN1cGFiYXNlID0gZ2V0U3VwYWJhc2UoKTtcclxuXHJcbmxldCBjaGFubmVscyA9IFtdO1xyXG5cclxuLyoqXHJcbiAqIPCfjJAgSW5pY2lhIGVsIG7DumNsZW8gZGUgc2luY3Jvbml6YWNpw7NuIGdsb2JhbCAod29ya2Vycywgam9icywgbWVuc2FqZXMsIHBlcmZpbGVzKVxyXG4gKiBNYW50aWVuZSBsb3MgY2FuYWxlcyBlbiB2aXZvLCBpbmNsdXNvIHNpIHNlIG1pbmltaXphIGxhIGFwcCBvIGhheSByZWNvbmV4acOzbi5cclxuICogQHBhcmFtIHsodHlwZTogc3RyaW5nLCBkYXRhOiBhbnkpID0+IHZvaWR9IG9uVXBkYXRlIENhbGxiYWNrIHF1ZSByZWNpYmUgbG9zIGNhbWJpb3MgZW4gdGllbXBvIHJlYWxcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzdGFydFJlYWx0aW1lQ29yZShvblVwZGF0ZSkge1xyXG4gIHN0b3BSZWFsdGltZUNvcmUoKTsgLy8gbGltcGlhIGNhbmFsZXMgcHJldmlvc1xyXG5cclxuICBjb25zdCBjb25maWcgPSB7XHJcbiAgICBjb25maWc6IHtcclxuICAgICAgYnJvYWRjYXN0OiB7IHNlbGY6IHRydWUgfSxcclxuICAgICAgcHJlc2VuY2U6IHsga2V5OiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgOCkgfSxcclxuICAgICAgcmVjb25uZWN0OiB0cnVlLFxyXG4gICAgfSxcclxuICB9O1xyXG5cclxuICAvKiog8J+UjCBIZWxwZXI6IGNyZWEgY2FuYWwgeSBsb2d1ZWEgY29uZXhpw7NuICovXHJcbiAgY29uc3Qgc3Vic2NyaWJlV2l0aExvZyA9IChuYW1lLCBvcHRpb25zLCBoYW5kbGVyKSA9PiB7XHJcbiAgICBjb25zdCBjaCA9IHN1cGFiYXNlXHJcbiAgICAgIC5jaGFubmVsKG5hbWUsIGNvbmZpZylcclxuICAgICAgLm9uKCdwb3N0Z3Jlc19jaGFuZ2VzJywgb3B0aW9ucywgKHBheWxvYWQpID0+IHtcclxuICAgICAgICBoYW5kbGVyKHBheWxvYWQpO1xyXG4gICAgICB9KVxyXG4gICAgICAuc3Vic2NyaWJlKChzdGF0dXMpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhg4pqhICR7bmFtZX06YCwgc3RhdHVzKTtcclxuICAgICAgICBpZiAoc3RhdHVzID09PSAnU1VCU0NSSUJFRCcpIG9uVXBkYXRlKCdjb25uZWN0ZWQnLCB7IGNoYW5uZWw6IG5hbWUgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgcmV0dXJuIGNoO1xyXG4gIH07XHJcblxyXG4gIC8vIPCfkbcgVHJhYmFqYWRvcmVzICh1YmljYWNpw7NuLCBlc3RhZG8pXHJcbiAgY29uc3Qgd29ya2VycyA9IHN1YnNjcmliZVdpdGhMb2coXHJcbiAgICAnY29yZS13b3JrZXJzJyxcclxuICAgIHsgZXZlbnQ6ICcqJywgc2NoZW1hOiAncHVibGljJywgdGFibGU6ICd3b3JrZXJfcHJvZmlsZXMnIH0sXHJcbiAgICAocGF5bG9hZCkgPT4ge1xyXG4gICAgICBpZiAocGF5bG9hZC5uZXcpIG9uVXBkYXRlKCd3b3JrZXInLCBwYXlsb2FkLm5ldyk7XHJcbiAgICB9XHJcbiAgKTtcclxuXHJcbiAgLy8g8J+nviBQZWRpZG9zIChqb2JzKVxyXG4gIGNvbnN0IGpvYnMgPSBzdWJzY3JpYmVXaXRoTG9nKFxyXG4gICAgJ2NvcmUtam9icycsXHJcbiAgICB7IGV2ZW50OiAnKicsIHNjaGVtYTogJ3B1YmxpYycsIHRhYmxlOiAnam9icycgfSxcclxuICAgIChwYXlsb2FkKSA9PiB7XHJcbiAgICAgIGlmIChwYXlsb2FkLm5ldykgb25VcGRhdGUoJ2pvYicsIHBheWxvYWQubmV3KTtcclxuICAgIH1cclxuICApO1xyXG5cclxuICAvLyDwn5KsIE1lbnNhamVzIChjaGF0KVxyXG4gIGNvbnN0IG1lc3NhZ2VzID0gc3Vic2NyaWJlV2l0aExvZyhcclxuICAgICdjb3JlLW1lc3NhZ2VzJyxcclxuICAgIHsgZXZlbnQ6ICdJTlNFUlQnLCBzY2hlbWE6ICdwdWJsaWMnLCB0YWJsZTogJ21lc3NhZ2VzJyB9LFxyXG4gICAgKHBheWxvYWQpID0+IHtcclxuICAgICAgaWYgKHBheWxvYWQubmV3KSBvblVwZGF0ZSgnbWVzc2FnZScsIHBheWxvYWQubmV3KTtcclxuICAgIH1cclxuICApO1xyXG5cclxuICAvLyDwn5GkIFBlcmZpbGVzIGJhc2UgKG5vbWJyZSwgYXZhdGFyLCByb2wpXHJcbiAgY29uc3QgcHJvZmlsZXMgPSBzdWJzY3JpYmVXaXRoTG9nKFxyXG4gICAgJ2NvcmUtcHJvZmlsZXMnLFxyXG4gICAgeyBldmVudDogJ1VQREFURScsIHNjaGVtYTogJ3B1YmxpYycsIHRhYmxlOiAncHJvZmlsZXMnIH0sXHJcbiAgICAocGF5bG9hZCkgPT4ge1xyXG4gICAgICBpZiAocGF5bG9hZC5uZXcpIG9uVXBkYXRlKCdwcm9maWxlJywgcGF5bG9hZC5uZXcpO1xyXG4gICAgfVxyXG4gICk7XHJcblxyXG4gIGNoYW5uZWxzID0gW3dvcmtlcnMsIGpvYnMsIG1lc3NhZ2VzLCBwcm9maWxlc107XHJcbiAgY29uc29sZS5sb2coJ+KchSBSZWFsdGltZUNvcmUgaW5pY2lhZG8geSBzaW5jcm9uaXphbmRvIGVuIHZpdm8nKTtcclxufVxyXG5cclxuLyoqIPCflLsgRGV0aWVuZSB0b2RvcyBsb3MgY2FuYWxlcyBhY3Rpdm9zICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzdG9wUmVhbHRpbWVDb3JlKCkge1xyXG4gIGNoYW5uZWxzLmZvckVhY2goKGNoKSA9PiBzdXBhYmFzZS5yZW1vdmVDaGFubmVsKGNoKSk7XHJcbiAgY2hhbm5lbHMgPSBbXTtcclxuICBjb25zb2xlLmxvZygn8J+bkSBSZWFsdGltZUNvcmUgZGV0ZW5pZG8nKTtcclxufVxyXG4iXSwibmFtZXMiOlsiZ2V0U3VwYWJhc2UiLCJzdXBhYmFzZSIsImNoYW5uZWxzIiwic3RhcnRSZWFsdGltZUNvcmUiLCJvblVwZGF0ZSIsInN0b3BSZWFsdGltZUNvcmUiLCJjb25maWciLCJicm9hZGNhc3QiLCJzZWxmIiwicHJlc2VuY2UiLCJrZXkiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHJpbmciLCJyZWNvbm5lY3QiLCJzdWJzY3JpYmVXaXRoTG9nIiwibmFtZSIsIm9wdGlvbnMiLCJoYW5kbGVyIiwiY2giLCJjaGFubmVsIiwib24iLCJwYXlsb2FkIiwic3Vic2NyaWJlIiwic3RhdHVzIiwiY29uc29sZSIsImxvZyIsIndvcmtlcnMiLCJldmVudCIsInNjaGVtYSIsInRhYmxlIiwibmV3Iiwiam9icyIsIm1lc3NhZ2VzIiwicHJvZmlsZXMiLCJmb3JFYWNoIiwicmVtb3ZlQ2hhbm5lbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/realtimeCore.js\n"));

/***/ })

});