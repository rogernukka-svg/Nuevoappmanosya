"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/client/page",{

/***/ "(app-pages-browser)/./lib/realtimeCore.js":
/*!*****************************!*\
  !*** ./lib/realtimeCore.js ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   startRealtimeCore: function() { return /* binding */ startRealtimeCore; },\n/* harmony export */   stopRealtimeCore: function() { return /* binding */ stopRealtimeCore; }\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(app-pages-browser)/./lib/supabase.js\");\n\nconst supabase = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.getSupabase)();\n/** üîá Toggle r√°pido de logs (d√©jalo en false en prod) */ const DEBUG = false;\nconst log = function() {\n    for(var _len = arguments.length, a = new Array(_len), _key = 0; _key < _len; _key++){\n        a[_key] = arguments[_key];\n    }\n    if (DEBUG) console.log(...a);\n};\nconst warn = function() {\n    for(var _len = arguments.length, a = new Array(_len), _key = 0; _key < _len; _key++){\n        a[_key] = arguments[_key];\n    }\n    if (DEBUG) console.warn(...a);\n};\nlet channels = [];\nlet socket = null;\nlet pingTimer = null;\nlet watchdogTimer = null;\nlet lastHeartbeatAt = 0;\nlet lastStatus = \"unknown\"; // 'connected' | 'disconnected' | 'unknown'\nconst subscribed = new Set();\n/**\r\n * üåê RealtimeCore (silencioso y estable)\r\n * - Conexi√≥n directa al socket\r\n * - Keep-alive por heartbeat\r\n * - Reconstrucci√≥n prudente si todos los canales caen o no hay heartbeat\r\n * - Sin toasts; logs s√≥lo si DEBUG=true\r\n *\r\n * @param {(type: 'connected'|'disconnected'|'worker'|'job'|'message'|'profile', data?: any) => void} onUpdate\r\n * @returns {() => void} cleanup (opcional)\r\n */ function startRealtimeCore(onUpdate) {\n    stopRealtimeCore(); // limpieza previa segura\n    log(\"‚öôÔ∏è RealtimeCore ‚Üí conectando socket...\");\n    socket = supabase.realtime.connect();\n    const channelConfig = {\n        config: {\n            broadcast: {\n                self: true\n            },\n            presence: {\n                key: Math.random().toString(36).slice(2, 8)\n            },\n            reconnect: true\n        }\n    };\n    /** Suscriptor con manejo de estado global */ const subscribeWithStatus = (name, pgOptions, handler)=>{\n        const ch = supabase.channel(name, channelConfig).on(\"postgres_changes\", pgOptions, (payload)=>{\n            var _payload_new, _ref;\n            // S√≥lo emitimos cuando hay datos nuevos\n            const data = (_ref = (_payload_new = payload === null || payload === void 0 ? void 0 : payload.new) !== null && _payload_new !== void 0 ? _payload_new : payload === null || payload === void 0 ? void 0 : payload.record) !== null && _ref !== void 0 ? _ref : null;\n            if (data != null) handler(data);\n        }).subscribe((status)=>{\n            log(\"canal \".concat(name, \":\"), status);\n            if (status === \"SUBSCRIBED\") {\n                subscribed.add(name);\n                // si es el primer canal en quedar OK ‚Üí connected\n                if (lastStatus !== \"connected\") {\n                    lastStatus = \"connected\";\n                    lastHeartbeatAt = Date.now();\n                    onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(\"connected\", {\n                        channel: name\n                    });\n                    log(\"‚úÖ realtime conectado\");\n                }\n            } else if (status === \"CLOSED\" || status === \"TIMED_OUT\" || status === \"CHANNEL_ERROR\") {\n                subscribed.delete(name);\n                // si no queda ninguno suscripto ‚Üí disconnected\n                if (subscribed.size === 0 && lastStatus !== \"disconnected\") {\n                    lastStatus = \"disconnected\";\n                    onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(\"disconnected\", {\n                        channel: name\n                    });\n                    warn(\"‚ö†Ô∏è realtime desconectado (no hay canales activos)\");\n                }\n            }\n        });\n        return ch;\n    };\n    // === Canales ===\n    const workers = subscribeWithStatus(\"core-workers\", {\n        event: \"*\",\n        schema: \"public\",\n        table: \"worker_profiles\"\n    }, (row)=>onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(\"worker\", row));\n    const jobs = subscribeWithStatus(\"core-jobs\", {\n        event: \"*\",\n        schema: \"public\",\n        table: \"jobs\"\n    }, (row)=>onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(\"job\", row));\n    const messages = subscribeWithStatus(\"core-messages\", {\n        event: \"INSERT\",\n        schema: \"public\",\n        table: \"messages\"\n    }, (row)=>onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(\"message\", row));\n    const profiles = subscribeWithStatus(\"core-profiles\", {\n        event: \"UPDATE\",\n        schema: \"public\",\n        table: \"profiles\"\n    }, (row)=>onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(\"profile\", row));\n    channels = [\n        workers,\n        jobs,\n        messages,\n        profiles\n    ];\n    // üíì Heartbeat cada 10s (silencioso)\n    clearInterval(pingTimer);\n    pingTimer = setInterval(()=>{\n        try {\n            if (socket === null || socket === void 0 ? void 0 : socket.isConnected()) {\n                socket.push({\n                    topic: \"phoenix\",\n                    event: \"heartbeat\",\n                    payload: {},\n                    ref: socket.makeRef()\n                });\n                lastHeartbeatAt = Date.now();\n                log(\"\\uD83D\\uDC93 heartbeat\");\n            } else {\n                warn(\"\\uD83E\\uDDF5 socket no conectado ‚Üí reconnect()\");\n                socket = supabase.realtime.connect();\n            }\n        } catch (e) {\n        /* noop */ }\n    }, 10000);\n    // üõ°Ô∏è Watchdog prudente (cada 20s)\n    clearInterval(watchdogTimer);\n    watchdogTimer = setInterval(()=>{\n        const noHeartbeatFor = Date.now() - lastHeartbeatAt;\n        // Reconstruir s√≥lo si:\n        // 1) no hay canales activos (desconectado real), O\n        // 2) pasaron >30s sin heartbeat (pesta√±a dormida/red inestable)\n        if (subscribed.size === 0 || noHeartbeatFor > 30000) {\n            warn(\"\\uD83E\\uDDEF watchdog ‚Üí reconstruyendo RealtimeCore‚Ä¶\");\n            const cb = onUpdate; // conservar ref\n            stopRealtimeCore();\n            startRealtimeCore(cb);\n        }\n    }, 20000);\n    // Opcional: devolver cleanup compatible\n    return ()=>stopRealtimeCore();\n}\n/** üßπ Limpieza total y segura */ function stopRealtimeCore() {\n    try {\n        channels.forEach((ch)=>supabase.removeChannel(ch));\n        channels = [];\n        subscribed.clear();\n        if (pingTimer) clearInterval(pingTimer);\n        if (watchdogTimer) clearInterval(watchdogTimer);\n        if (socket) {\n            try {\n                socket.disconnect();\n            } catch (e) {}\n            socket = null;\n        }\n        lastStatus = \"unknown\";\n        log(\"\\uD83D\\uDED1 RealtimeCore detenido\");\n    } catch (err) {\n        console.error(\"‚ùå Error al detener RealtimeCore:\", err);\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/realtimeCore.js\n"));

/***/ })

});